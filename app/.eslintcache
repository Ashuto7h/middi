[{"/Users/mike/Documents/middi/app/src/index.js":"1","/Users/mike/Documents/middi/app/src/reportWebVitals.js":"2","/Users/mike/Documents/middi/app/src/state/appReducer.ts":"3","/Users/mike/Documents/middi/app/src/state/initialState.ts":"4","/Users/mike/Documents/middi/app/src/components/ChatBox.tsx":"5","/Users/mike/Documents/middi/app/src/App.js":"6","/Users/mike/Documents/middi/app/src/components/Message.tsx":"7","/Users/mike/Documents/middi/app/src/components/ActionButton.tsx":"8","/Users/mike/Documents/middi/app/src/state/dispatchHelper.ts":"9","/Users/mike/Documents/middi/app/src/components/Loading.tsx":"10"},{"size":500,"mtime":1607646375032,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1607646375033,"results":"13","hashOfConfig":"12"},{"size":722,"mtime":1607740424023,"results":"14","hashOfConfig":"12"},{"size":1932,"mtime":1607742290155,"results":"15","hashOfConfig":"12"},{"size":1471,"mtime":1607740972187,"results":"16","hashOfConfig":"12"},{"size":829,"mtime":1607740213192,"results":"17","hashOfConfig":"12"},{"size":1610,"mtime":1607741711103,"results":"18","hashOfConfig":"12"},{"size":357,"mtime":1607736862096,"results":"19","hashOfConfig":"12"},{"size":136,"mtime":1607740291105,"results":"20","hashOfConfig":"12"},{"size":293,"mtime":1607742098839,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1uglca",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mike/Documents/middi/app/src/index.js",[],["46","47"],"/Users/mike/Documents/middi/app/src/reportWebVitals.js",[],"/Users/mike/Documents/middi/app/src/state/appReducer.ts",[],["48","49"],"/Users/mike/Documents/middi/app/src/state/initialState.ts",[],"/Users/mike/Documents/middi/app/src/components/ChatBox.tsx",["50","51","52"],"import React, { useState, useContext, useEffect } from 'react';\nimport { AppContext } from '../App';\nimport * as types from '../types';\nimport Message from './Message';\nimport ActionButton from './ActionButton';\n\nconst ChatBox = () => {\n  const { appState, dispatch } = useContext<types.Context>(AppContext);\n  const [queueIndex, setQueueIndex] = useState<number>(0);\n  const [messages, setMessages] = useState<types.Message[]>([]);\n\n  useEffect(() => {\n    const next = appState.messages[queueIndex]\n    const updatedMessages = [ ...messages, next ];\n    setMessages(updatedMessages);\n    if (queueIndex < appState.messages.length - 1) {\n      const delay = next.delay;\n      const timer = setTimeout(() => {\n        setQueueIndex(queueIndex + 1);\n      }, delay);\n      return () => {\n        clearTimeout(timer);\n      }\n    }\n  }, [queueIndex])\n\n  useEffect(() => {\n    if (messages.length !== appState.messages.length) {\n      setQueueIndex(queueIndex + 1);\n    }\n  }, [appState])\n\n  return (\n    <div className=\"chatbox\">\n      <div className=\"chatbox__messages\">\n        {messages.map((message: types.Message, index: number) => (\n          <Message message={message} key={index} />\n        ))}\n      </div>\n      <div className=\"chatbox__actions\">\n        {appState.actions && appState.actions.map((action: types.Action, index: number) => (\n          <ActionButton action={action} key={index} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBox;\n","/Users/mike/Documents/middi/app/src/App.js",[],"/Users/mike/Documents/middi/app/src/components/Message.tsx",["53"],"import React, { useEffect, useState, useContext } from 'react';\nimport * as types from '../types';\nimport Loading from './Loading';\nimport { AppContext } from '../App';\nimport { ReactComponent as Avatar } from './avatar.svg';\n\ntype MessageProps = {\n    message: types.Message;\n};\n\nconst Message = ({ message }: MessageProps) => {\n    const { dispatch } = useContext(AppContext);\n    const { delay, type, text, sender, showLoader } = message;\n    const [typing, setTyping] = useState(!!delay);\n    const [waiting, setWaiting] = useState(!!delay);\n\n    useEffect(() => {\n        const typingTimeout = setTimeout(() => {\n            setTyping(!typing);\n            if (message.dispatchOnSend) {\n                dispatch(message.dispatchOnSend);\n            }\n        }, delay)\n        const delayTimeout = setTimeout(() => {\n            setWaiting(!typing);\n        }, delay*0.2)\n        return () => {\n            clearTimeout(typingTimeout);\n            clearTimeout(delayTimeout);\n        };\n    }, [delay]);\n\n    return (\n        <>\n            { !waiting &&\n                (typing\n                    ? showLoader && <div className=\"message message--loading\">\n                        <Loading />\n                    </div>\n                    : <>\n                        \n                        <div className={`message message--sender-${sender} ${type}`}>\n                            {type === 'message--initial' && <Avatar />}\n                            <p>{ text }</p>\n                        </div>\n                    </>\n                )\n            }\n        </>\n    )\n};\n\nexport default Message;","/Users/mike/Documents/middi/app/src/components/ActionButton.tsx",[],"/Users/mike/Documents/middi/app/src/state/dispatchHelper.ts",[],"/Users/mike/Documents/middi/app/src/components/Loading.tsx",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":8,"column":21,"nodeType":"60","messageId":"61","endLine":8,"endColumn":29},{"ruleId":"62","severity":1,"message":"63","line":25,"column":6,"nodeType":"64","endLine":25,"endColumn":18,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":31,"column":6,"nodeType":"64","endLine":31,"endColumn":16,"suggestions":"67"},{"ruleId":"62","severity":1,"message":"68","line":31,"column":8,"nodeType":"64","endLine":31,"endColumn":15,"suggestions":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appState.messages' and 'messages'. Either include them or remove the dependency array.","ArrayExpression",["72"],"React Hook useEffect has missing dependencies: 'messages.length' and 'queueIndex'. Either include them or remove the dependency array. You can also do a functional update 'setQueueIndex(q => ...)' if you only need 'queueIndex' in the 'setQueueIndex' call.",["73"],"React Hook useEffect has missing dependencies: 'dispatch', 'message.dispatchOnSend', and 'typing'. Either include them or remove the dependency array. You can also do a functional update 'setTyping(t => ...)' if you only need 'typing' in the 'setTyping' call.",["74"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [appState.messages, messages, queueIndex]",{"range":"81","text":"82"},"Update the dependencies array to be: [appState, messages.length, queueIndex]",{"range":"83","text":"84"},"Update the dependencies array to be: [delay, dispatch, message.dispatchOnSend, typing]",{"range":"85","text":"86"},[835,847],"[appState.messages, messages, queueIndex]",[974,984],"[appState, messages.length, queueIndex]",[999,1006],"[delay, dispatch, message.dispatchOnSend, typing]"]