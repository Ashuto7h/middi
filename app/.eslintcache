[{"/Users/mike/Documents/middi/app/src/index.js":"1","/Users/mike/Documents/middi/app/src/reportWebVitals.js":"2","/Users/mike/Documents/middi/app/src/state/appReducer.ts":"3","/Users/mike/Documents/middi/app/src/state/initialState.ts":"4","/Users/mike/Documents/middi/app/src/components/ChatBox.tsx":"5","/Users/mike/Documents/middi/app/src/App.js":"6","/Users/mike/Documents/middi/app/src/components/Message.tsx":"7","/Users/mike/Documents/middi/app/src/components/ActionButton.tsx":"8","/Users/mike/Documents/middi/app/src/state/dispatchHelper.ts":"9","/Users/mike/Documents/middi/app/src/components/Loading.tsx":"10","/Users/mike/Documents/middi/app/src/components/RegisterForm.tsx":"11","/Users/mike/Documents/middi/app/src/types.ts":"12","/Users/mike/Documents/middi/app/src/sequences/introduction.ts":"13","/Users/mike/Documents/middi/app/src/sequences/auth.ts":"14","/Users/mike/Documents/middi/app/src/components/LoginForm.tsx":"15","/Users/mike/Documents/middi/app/src/state/api.ts":"16","/Users/mike/Documents/middi/app/src/sequences/habits.ts":"17","/Users/mike/Documents/middi/app/src/components/AddHabitForm.tsx":"18","/Users/mike/Documents/middi/app/src/components/ColorSelect.tsx":"19","/Users/mike/Documents/middi/app/src/components/HabitList.tsx":"20","/Users/mike/Documents/middi/app/src/components/HabitListItem.tsx":"21","/Users/mike/Documents/middi/app/src/env.ts":"22","/Users/mike/Documents/middi/app/src/state/modifiers.ts":"23","/Users/mike/Documents/middi/app/src/utils/utils.ts":"24","/Users/mike/Documents/middi/app/src/components/HabitCompleteToggle.tsx":"25","/Users/mike/Documents/middi/app/src/components/Habits.tsx":"26","/Users/mike/Documents/middi/app/src/components/HabitOverview.tsx":"27","/Users/mike/Documents/middi/app/src/components/GoalAchievementParty.tsx":"28"},{"size":500,"mtime":1607646375032,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1607646375033,"results":"31","hashOfConfig":"30"},{"size":1839,"mtime":1607999006216,"results":"32","hashOfConfig":"30"},{"size":214,"mtime":1607958676475,"results":"33","hashOfConfig":"30"},{"size":1512,"mtime":1608063220509,"results":"34","hashOfConfig":"30"},{"size":1233,"mtime":1608063235585,"results":"35","hashOfConfig":"30"},{"size":2184,"mtime":1608054978114,"results":"36","hashOfConfig":"30"},{"size":357,"mtime":1607736862096,"results":"37","hashOfConfig":"30"},{"size":136,"mtime":1607740291105,"results":"38","hashOfConfig":"30"},{"size":293,"mtime":1607742098839,"results":"39","hashOfConfig":"30"},{"size":2963,"mtime":1608054982442,"results":"40","hashOfConfig":"30"},{"size":1525,"mtime":1608069672829,"results":"41","hashOfConfig":"30"},{"size":2316,"mtime":1608047869681,"results":"42","hashOfConfig":"30"},{"size":4563,"mtime":1608074208451,"results":"43","hashOfConfig":"30"},{"size":2961,"mtime":1608054973133,"results":"44","hashOfConfig":"30"},{"size":2079,"mtime":1608078734157,"results":"45","hashOfConfig":"30"},{"size":4422,"mtime":1608072845150,"results":"46","hashOfConfig":"30"},{"size":4015,"mtime":1608057601215,"results":"47","hashOfConfig":"30"},{"size":1073,"mtime":1607988597816,"results":"48","hashOfConfig":"30"},{"size":700,"mtime":1607996787499,"results":"49","hashOfConfig":"30"},{"size":696,"mtime":1608075595739,"results":"50","hashOfConfig":"30"},{"size":464,"mtime":1608071661945,"results":"51","hashOfConfig":"30"},{"size":1075,"mtime":1608078330075,"results":"52","hashOfConfig":"30"},{"size":292,"mtime":1608046697313,"results":"53","hashOfConfig":"30"},{"size":3441,"mtime":1608077992618,"results":"54","hashOfConfig":"30"},{"size":1589,"mtime":1608069651795,"results":"55","hashOfConfig":"30"},{"size":3919,"mtime":1608079032181,"results":"56","hashOfConfig":"30"},{"size":1951,"mtime":1608073853841,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1uglca",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"65"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"65"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"65"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"65"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"65"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"65"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"65"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"65"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"65"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"65"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"65"},"/Users/mike/Documents/middi/app/src/index.js",[],["129","130"],"/Users/mike/Documents/middi/app/src/reportWebVitals.js",[],"/Users/mike/Documents/middi/app/src/state/appReducer.ts",[],["131","132"],"/Users/mike/Documents/middi/app/src/state/initialState.ts",[],"/Users/mike/Documents/middi/app/src/components/ChatBox.tsx",["133","134","135","136"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { AppContext } from '../App';\nimport * as types from '../types';\nimport Message from './Message';\nimport ActionButton from './ActionButton';\n\nconst ChatBox = () => {\n  const { appState, dispatch } = useContext<types.Context>(AppContext);\n  const [queueIndex, setQueueIndex] = useState<number>(0);\n  const [messages, setMessages] = useState<types.Message[]>([]);\n\n  useEffect(() => {\n    const next = appState.messages[queueIndex]\n    const updatedMessages = [ ...messages, next ];\n    setMessages(updatedMessages);\n    if (queueIndex < appState.messages.length - 1) {\n      const delay = next.delay;\n      const timer = setTimeout(() => {\n        setQueueIndex(queueIndex + 1);\n      }, delay);\n      return () => {\n        clearTimeout(timer);\n      }\n    }\n  }, [queueIndex])\n\n  useEffect(() => {\n    if (messages.length !== appState.messages.length) {\n      setQueueIndex(queueIndex + 1);\n    }\n  }, [appState.messages])\n\n  return (\n    <div className=\"chatbox\">\n      <div className=\"chatbox__messages\" >\n        {messages.map((message: types.Message) => (\n          message && <>\n            <Message message={message} key={message.uuid} />\n          </>\n        ))}\n      </div>\n      <div className=\"chatbox__actions\">\n        {appState.actions && appState.actions.map((action: types.Action) => (\n          <ActionButton action={action} key={action.uuid} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBox;\n","/Users/mike/Documents/middi/app/src/App.js",["137"],"import { createContext, useEffect, useReducer, useState } from 'react';\nimport { reducer } from './state/appReducer';\nimport { initialState } from './state/initialState';\nimport './styles/styles.scss';\nimport './components/ChatBox';\nimport ChatBox from './components/ChatBox';\nimport dispatchHelper from './state/dispatchHelper';\nimport { getAuthorizedUser, getHabits } from './state/api';\nimport GoalAchievementParty from './components/GoalAchievementParty';\n\nexport const AppContext = createContext();\n\nconst App = () => {\n  const [appState, dispatch] = useReducer(reducer, initialState);\n  const [loading, setLoading] = useState(true);\n\n  const initializeApp = () => {\n    getAuthorizedUser(appState)\n    .then(() => {\n      getHabits()\n    })\n    .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    dispatchHelper.dispatch = (payload) => dispatch(payload);\n    Object.freeze(dispatchHelper);\n    initializeApp()\n  }, [])\n\n  return (\n    <AppContext.Provider value={{ appState, dispatch}}>\n      <div className=\"app\">\n        <header className=\"header\">Middi</header>\n        {!loading && <ChatBox loggedIn={false} />}\n      </div>\n      <GoalAchievementParty />\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","/Users/mike/Documents/middi/app/src/components/Message.tsx",["138"],"import React, { useEffect, useState, useContext, useRef } from 'react';\nimport * as types from '../types';\nimport Loading from './Loading';\nimport { AppContext } from '../App';\nimport { ReactComponent as Avatar } from './icons/avatar.svg';\n\nconst AlwaysScrollToBottom = () => {\n    const elementRef = useRef<any>();\n    useEffect(() => elementRef.current.scrollIntoView(), []);\n    return <div ref={elementRef} />;\n  };\n\ntype MessageProps = {\n    message: types.Message;\n};\n\nconst Message = ({ message }: MessageProps) => {\n    const { dispatch } = useContext(AppContext);\n    const { delay, messageClass, text, sender, showLoader, Component } = message;\n    const [typing, setTyping] = useState(!!delay);\n    const [waiting, setWaiting] = useState(!!delay);\n\n    useEffect(() => {\n        const typingTimeout = setTimeout(() => {\n            setTyping(!typing);\n            if (message.dispatchOnSend) {\n                dispatch(message.dispatchOnSend);\n            }\n        }, delay)\n        const delayTimeout = setTimeout(() => {\n            setWaiting(!typing);\n        }, delay*0.2)\n        return () => {\n            clearTimeout(typingTimeout);\n            clearTimeout(delayTimeout);\n        };\n    }, [delay]);\n\n    return (\n        <>\n            { !waiting &&\n                (typing\n                    ? showLoader && <div className=\"message message--loading\">\n                        <Loading />\n                        <AlwaysScrollToBottom key={`${message.uuid}x`}/>\n                    </div>\n                    : <>\n                        <div className={`message message--sender-${sender} ${messageClass}`}>\n                            {messageClass === 'message--initial' && <Avatar />}\n                            {messageClass === 'message--component'\n                                ? message.componentProps ? <Component {...message.componentProps} /> : <Component />\n                                : <p>{ text }</p>\n                            }\n                            <AlwaysScrollToBottom key={`${message.uuid}x`}/>\n                        </div>\n                    </>\n                )\n            }\n        </>\n    )\n};\n\nexport default Message;","/Users/mike/Documents/middi/app/src/components/ActionButton.tsx",[],"/Users/mike/Documents/middi/app/src/state/dispatchHelper.ts",[],"/Users/mike/Documents/middi/app/src/components/Loading.tsx",[],"/Users/mike/Documents/middi/app/src/components/RegisterForm.tsx",["139","140","141","142"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { postRegistrationSequence, loginSequence } from '../sequences/auth';\nimport { ReactComponent as Done } from './icons/done-shield.svg';\n\ntype RegisterForm = {\n    email: string;\n    password: string;\n    name: string;\n};\n\nconst RegisterForm = () => {\n    const { appState } = useContext(AppContext);\n    const [formData, setFormData] = useState<RegisterForm>({ name: '', email: '', password: '' });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [submitted, setSubmitted] = useState<boolean>(false);\n    const [error, setError] = useState<string>(' ');\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.REGISTRATION_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    const submit = () => {\n        setLoading(true);\n        fetch(`${env.apiUrl}/auth/register`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.err) {\n                setLoading(false);\n                setError(res.err.message);\n            }\n            else {\n                setLoading(false);\n                setSubmitted(true);\n                postRegistrationSequence(formData.name);\n            }\n        })\n    }\n\n    return (\n        <div className=\"register-form\">\n            <form>\n                <h3>👤 Sign Up</h3>\n                { loading \n                    ? <Loading />\n                    : !submitted\n                        ? <>\n                            <label>Nickname <input name=\"name\" type=\"text\" onChange={handleInputChange} placeholder=\"What should I call you?\" /></label>\n                            <label>Email <input name=\"email\" type=\"email\" onChange={handleInputChange} placeholder=\"Used for logging in\" /></label>\n                            <label>Password <input name=\"password\" type=\"password\" placeholder=\"Choose something strong\" onChange={handleInputChange} /></label>\n                        </>\n                        : <div className=\"form__placeholder-success\"><Done /></div>\n                }\n                {(!loading && !submitted) &&\n                    <div className=\"form__extra\">\n                        <p className=\"error\">{ error }</p>\n                        <a onClick={loginSequence}>Log In</a>\n                    </div>\n                }\n            </form>\n        </div>\n    )\n};\n\nexport default RegisterForm;","/Users/mike/Documents/middi/app/src/types.ts",[],"/Users/mike/Documents/middi/app/src/sequences/introduction.ts",[],"/Users/mike/Documents/middi/app/src/sequences/auth.ts",[],"/Users/mike/Documents/middi/app/src/components/LoginForm.tsx",["143","144","145","146","147"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { postLoginSequence, registrationSequence } from '../sequences/auth';\nimport { ReactComponent as Done } from './icons/done-shield.svg';\nimport { EMIT_EVENT } from '../state/appReducer';\n\ntype LoginForm = {\n    email: string;\n    password: string;\n};\n\nconst LoginForm = () => {\n    const { appState, dispatch } = useContext(AppContext);\n    const [formData, setFormData] = useState<LoginForm>({ email: '', password: '' });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [submitted, setSubmitted] = useState<boolean>(false);\n    const [error, setError] = useState<string>(' ');\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.LOGIN_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    const submit = () => {\n        setError('')\n        setLoading(true);\n        fetch(`${env.apiUrl}/auth/login`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.err) {\n                setLoading(false);\n                setError(res.err.message);\n            }\n            else {\n                const { name } = res;\n                setLoading(false);\n                setSubmitted(true)\n                postLoginSequence(name, appState);\n            }\n            dispatch({\n                type: EMIT_EVENT,\n                payload: ''\n            })\n        });\n    }\n\n    const showRegistration = () => {\n\n    }\n\n    return (\n        <div className=\"form login-form\">\n            <form>\n                <h3>👤 Login</h3>\n                {loading\n                    ? <Loading />\n                    : !submitted \n                        ? <>\n                            <label>Email <input name=\"email\" type=\"email\" onChange={handleInputChange} /></label>\n                            <label>Password <input name=\"password\" type=\"password\" onChange={handleInputChange} /></label>\n                        </>\n                        : <div className=\"form__placeholder-success\"><Done /></div>\n                }\n                {(!loading && !submitted) &&\n                    <div className=\"form__extra\">\n                        <p className=\"error\">{ error }</p>\n                        <a onClick={registrationSequence}>Sign up instead</a>\n                    </div>\n                }\n            </form>\n        </div>\n    )\n};\n\nexport default LoginForm;","/Users/mike/Documents/middi/app/src/state/api.ts",[],"/Users/mike/Documents/middi/app/src/sequences/habits.ts",["148"],"import { Events, Habit, Message } from '../types';\nimport { v4 as uuid } from 'uuid';\nimport dispatchHelper from '../state/dispatchHelper';\nimport { ACTIONS_SET, MESSAGE_ADDED, EMIT_EVENT } from '../state/appReducer';\nimport AddHabitForm from '../components/AddHabitForm';\nimport HabitList from '../components/HabitList';\nimport { startMessages } from './introduction';\nimport Habits from '../components/Habits';\nimport HabitOverview from '../components/HabitOverview';\n\n\nexport const addHabitSequence = () => {\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'message--component',\n            uuid: uuid(),\n            sender: 'bot',\n            text: null,\n            delay: 1000,\n            showLoader: false,\n            Component: AddHabitForm\n        }\n    });\n\n    // Submit button\n    dispatchHelper.dispatch({\n        type: ACTIONS_SET,\n        payload: [\n            { \n                uuid: uuid(),\n                label: 'Submit', \n                callback: () => {\n                    dispatchHelper.dispatch({\n                        type: EMIT_EVENT,\n                        payload: Events.HABIT_FORM_SUBMITTED\n                })\n            }}\n        ]\n    })\n}\n\nexport const viewHabitListSequence = () => {\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'message--component',\n            uuid: uuid(),\n            sender: 'bot',\n            text: null,\n            delay: 1000,\n            showLoader: false,\n            Component: Habits\n        }\n    });\n\n    dispatchHelper.dispatch({\n        type: ACTIONS_SET,\n        payload: [\n            { \n                uuid: uuid(),\n                label: 'Done', \n                callback: () => {\n                    dispatchHelper.dispatch({\n                        type: MESSAGE_ADDED,\n                        payload: {\n                            ...startMessages,\n                            text: `What's next?`\n                        }\n                    })\n                }}\n        ]\n    })\n}\n\n\nexport const viewCompleteHabitListSequence = () => {\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'message--component',\n            uuid: uuid(),\n            sender: 'bot',\n            text: null,\n            delay: 1000,\n            showLoader: false,\n            Component: HabitList\n        }\n    });\n\n    dispatchHelper.dispatch({\n        type: ACTIONS_SET,\n        payload: [\n            { \n                uuid: uuid(),\n                label: 'Done', \n                callback: () => {\n                    dispatchHelper.dispatch({\n                        type: MESSAGE_ADDED,\n                        payload: {\n                            messageClass: 'message--initial',\n                            uuid: uuid(),\n                            sender: 'bot',\n                            text: 'Keep up the good work! 🥳',\n                            delay: 1000,\n                            showLoader: false,\n                            Component: HabitList\n                        }\n                    })\n                    dispatchHelper.dispatch({\n                        type: MESSAGE_ADDED,\n                        payload: {\n                            ...startMessages,\n                            text: `What's next?`\n                        }\n                    })\n                }}\n        ]\n    })\n}\n\nexport const viewHabitOverviewSequence = (habit: Habit) => {\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'message--component',\n            uuid: uuid(),\n            sender: 'bot',\n            text: null,\n            delay: 1000,\n            showLoader: false,\n            Component: HabitOverview,\n            componentProps: {\n                habitId: habit.id\n            }\n        }\n    });\n\n    dispatchHelper.dispatch({\n        type: ACTIONS_SET,\n        payload: [\n            { \n                uuid: uuid(),\n                label: 'Done', \n                callback: () => {\n                    dispatchHelper.dispatch({\n                        type: MESSAGE_ADDED,\n                        payload: {\n                            ...startMessages,\n                            text: `What's next?`\n                        }\n                    })\n                }}\n        ]\n    })\n}","/Users/mike/Documents/middi/app/src/components/AddHabitForm.tsx",["149","150"],"import React, { useState, useContext, useEffect } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { ReactComponent as Done } from './icons/done.svg';\nimport { EMIT_EVENT } from '../state/appReducer';\nimport { getHabits } from '../state/api';\nimport ColorSelect from './ColorSelect';\n\ntype HabitForm = {\n    name: string;\n    description: string;\n    color: string;\n    weeklyGoal: number;\n};\n\nconst AddHabitForm = () => {\n    const defaultForm = {\n        name: '',\n        description: '',\n        color: '',\n        weeklyGoal: 1\n    };\n    const { appState, dispatch } = useContext(AppContext);\n    const [formData, setFormData] = useState<HabitForm>(defaultForm);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [submitted, setSubmitted] = useState<boolean>(false);\n    const [error, setError] = useState<string>(' ');\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.HABIT_FORM_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<any>) => {\n        let value = event.target.value;\n        if (event.target.name === 'weeklyGoal') {\n            value = parseInt(value);\n        }\n        setFormData({\n            ...formData,\n            [event.target.name]: value\n        });\n    }\n\n    const submit = () => {\n        setError('')\n        setLoading(true);\n        fetch(`${env.apiUrl}/habits`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.err) {\n                setLoading(false);\n                setError(res.err.message);\n            }\n            else {\n                const { name } = res;\n                setLoading(false);\n                setSubmitted(true)\n                getHabits();\n            }\n            dispatch({\n                type: EMIT_EVENT,\n                payload: ''\n            })\n        });\n    }\n\n    return (\n        <div className=\"form add-habit-form\">\n            <form>\n                <h3>➕ New Habit</h3>\n                {loading\n                    ? <Loading />\n                    : !submitted \n                        ? <>\n                            <label>Name <input name=\"name\" type=\"text\" onChange={handleInputChange} \n                                placeholder=\"Drink 3 glasses of water, Do 10 pushups...\"\n                            /></label>\n                            <label>Description (optional) <textarea name=\"description\" rows={4} onChange={handleInputChange} /></label>\n                            <ColorSelect onColorSelect={handleInputChange} />\n                            <label>Weekly goal - how many times a week are you aiming to complete this goal?\n                                <select name=\"weeklyGoal\" onChange={handleInputChange}>\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                    <option value=\"5\">5</option>\n                                    <option value=\"6\">6</option>\n                                    <option value=\"7\">7</option>\n                                </select>\n                            </label>\n                        </>\n                        : <div className=\"form__placeholder-success\"><Done /></div>\n                }\n                {(!loading && !submitted) &&\n                    <div className=\"form__extra\">\n                        <p className=\"error\">{ error }</p>\n                    </div>\n                }\n            </form>\n        </div>\n    )\n};\n\nexport default AddHabitForm;","/Users/mike/Documents/middi/app/src/components/ColorSelect.tsx",[],"/Users/mike/Documents/middi/app/src/components/HabitList.tsx",["151"],"import React, { useState, useContext } from 'react';\nimport { AppContext } from '../App';\nimport HabitListItem from './HabitListItem';\nimport format from 'date-fns/format';\nimport { Habit } from '../types';\n\nconst HabitList = () => {\n    const { appState } = useContext(AppContext);\n\n    return (\n        <div className=\"habit-list\">\n            <p className=\"habit-list__title\">{format(new Date(), 'EEEE, do LLLL yyyy')}</p>\n            <p className=\"habit-list__subtitle\">Toggle a habit to complete it for today</p>\n            {appState.habits.map((habit: Habit) => (\n                <HabitListItem habit={habit} key={habit.id} />\n            ))}\n        </div>\n    )\n};\n\nexport default HabitList;","/Users/mike/Documents/middi/app/src/components/HabitListItem.tsx",["152"],"import React, { useEffect, useState } from 'react';\nimport { Habit } from '../types';\nimport { getHabitColorKey } from '../utils/utils';\nimport HabitCompleteToggle from './HabitCompleteToggle';\n\ntype HabitListItemProps = {\n    habit: Habit\n};\n\nconst HabitListItem = ({ habit }: HabitListItemProps) => {\n    const [colorKey, setColorKey] = useState<string>('');\n\n    useEffect(() => {\n        setColorKey(getHabitColorKey(habit));\n    }, [])\n\n    return (\n        <div className={`habit-list__item habit-list__item--${colorKey}`}>\n            {habit.name}\n            <HabitCompleteToggle habit={habit} colorKey={colorKey} date={new Date()} />\n        </div>\n    )\n};\n\nexport default HabitListItem","/Users/mike/Documents/middi/app/src/env.ts",[],"/Users/mike/Documents/middi/app/src/state/modifiers.ts",[],"/Users/mike/Documents/middi/app/src/utils/utils.ts",[],"/Users/mike/Documents/middi/app/src/components/HabitCompleteToggle.tsx",["153"],"import React, { useEffect, useState, useContext } from 'react';\nimport { AppContext } from '../App';\nimport { CompletedTask, Events, Habit } from '../types';\nimport Switch from 'react-switch';\nimport isSameDay from 'date-fns/isSameDay';\nimport { ReactComponent as Balloons } from './icons/balloons.svg';\nimport { getHabits, saveTaskState } from '../state/api';\nimport { ADD_COMPLETED_TASK, EMIT_EVENT, REMOVE_COMPLETED_TASK } from '../state/appReducer';\nimport env from '../env';\n\ntype HabitCompleteToggleProps = {\n    habit: Habit;\n    colorKey: string;\n    compact?: boolean;\n    date: Date;\n};\n\nconst HabitCompleteToggle = ({ habit, colorKey, compact, date }: HabitCompleteToggleProps) => {\n\n    const { dispatch } = useContext(AppContext);\n    const [isCompletedToday, setIsCompletedToday] = useState<boolean>(false);\n    const [completedTask, setCompletedTask] = useState<CompletedTask | null>(null);\n    const [celebrate, setCelebrate] = useState<boolean>(false);\n\n    useEffect(() => {\n        const completedToday = habit.CompletedTasks.find((task: CompletedTask) => {\n            return isSameDay(new Date(task.dateCompleted), date);\n        });\n        if (completedToday) {\n            setIsCompletedToday(true);\n            setCompletedTask(completedToday);\n        }\n    }, [])\n\n    const onCompleteToggle = (val: boolean) => {\n        if (completedTask) {\n            saveTaskState(completedTask, 'DELETE')\n            .then(res => {\n                setCompletedTask(null);\n                setIsCompletedToday(val);\n                dispatch({\n                    type: REMOVE_COMPLETED_TASK,\n                    payload: completedTask\n                });\n            });\n        }\n        else {\n            const newTask: CompletedTask = {\n                HabitId: habit.id,\n                dateCompleted: date.getTime().toString(),\n            };\n            saveTaskState(newTask, 'POST')\n                .then(res => {\n                    setCelebrate(val);\n                    setIsCompletedToday(val);\n                    setCompletedTask(res.completedTask);\n                    dispatch({\n                        type: ADD_COMPLETED_TASK,\n                        payload: res.completedTask\n                    });\n                    if (res.goalCompleted) {\n                        // Trigger goal achievement party\n                        getHabits();\n                        dispatch({\n                            type: EMIT_EVENT,\n                            payload: Events.GOAL_COMPLETED\n                        });\n                    }\n                });\n        }\n    }\n\n    return (\n        <div className=\"habit-complete-toggle\">\n            <p className={isCompletedToday ? '' : 'item-status--transparent'}>{!compact ? 'Nice job! 🎉' : '🎉'}</p>\n            <label>\n                <Switch \n                    checked={isCompletedToday}\n                    onChange={onCompleteToggle}\n                    onColor={env.habitColors[colorKey]}\n                    handleDiameter={20}\n                    uncheckedIcon={false}\n                    checkedIcon={false}\n                    boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n                    activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n                    height={20}\n                    width={48}\n                />\n            </label>\n            {celebrate && <Balloons />}\n        </div>\n    )\n}\n\nexport default HabitCompleteToggle;","/Users/mike/Documents/middi/app/src/components/Habits.tsx",["154"],"import React, { useContext } from 'react';\nimport { AppContext } from '../App';\nimport { CompletedTask, Habit } from '../types';\nimport { getHabitColorKey } from '../utils/utils';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport { viewHabitOverviewSequence } from '../sequences/habits';\n\nconst Habits = () => {\n    const { appState, dispatch } = useContext(AppContext);\n\n    const getLastCompletedDate = (habit: Habit): string => {\n        if (habit.CompletedTasks?.length) {\n            const sortedTasks = habit.CompletedTasks.sort((ca: CompletedTask, cb: CompletedTask) => {\n                return (new Date(cb.dateCompleted) as any) - (new Date(ca.dateCompleted) as any);\n            });\n            const mostRecent = new Date(sortedTasks[0].dateCompleted);\n            return `Last completed ${formatDistanceToNow(mostRecent, { addSuffix: true })}`\n        }\n        return ''\n    }\n\n    const viewHabit = (habit: Habit) => {\n        viewHabitOverviewSequence(habit);\n    }\n\n    return (\n        <div className=\"habits habit-list\">\n            {appState.habits.map((habit: Habit) => (\n                <div className={`habit-list__item habit-list__item--${getHabitColorKey(habit)}`} key={habit.id}>\n                    <div className=\"habits__description\">\n                        {habit.name}\n                        <p>{getLastCompletedDate(habit)}</p>\n                    </div>\n                    <button className=\"button\" onClick={() => viewHabit(habit)}>View</button>\n                </div>\n            ))}\n        </div>\n    )\n};\n\nexport default Habits;","/Users/mike/Documents/middi/app/src/components/HabitOverview.tsx",["155"],"import React, { useState, useEffect, useContext, ReactElement } from 'react';\nimport { AppContext } from '../App';\nimport { CompletedTask, Habit } from '../types';\nimport { getHabitColorKey } from '../utils/utils';\nimport HabitCompleteToggle from './HabitCompleteToggle';\nimport isSameWeek from 'date-fns/isSameWeek';\nimport format from 'date-fns/format';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport add from 'date-fns/add';\nimport { ReactComponent as Rocket } from './icons/rocket.svg';\nimport { ReactComponent as Trophy } from './icons/trophy.svg';\nimport { ReactComponent as Done } from './icons/check-date.svg';\n\ntype WeekDayProps = {\n    date: Date;\n    habit: Habit;\n    colorKey: string;\n}\n\nconst WeekDay = ({ date, habit, colorKey }: WeekDayProps) => (\n    <div className=\"week-summary__day\" key={date.getTime()}>\n        <p>{format(date, 'E')}</p>\n        <HabitCompleteToggle habit={habit} colorKey={colorKey} date={date} compact={true} />\n    </div>\n)\n\ntype HabitOverviewProps = {\n    habitId: number\n};\n\nconst HabitOverview = ({ habitId }: HabitOverviewProps) => {\n    const { appState } = useContext(AppContext);\n    const [colorKey, setColorKey] = useState<string>('');\n    const [habit, setHabit] = useState<Habit | any>(null);\n\n\n    useEffect(() => {\n        const currentHabit = appState.habits.find((h: Habit) => h.id === habitId );\n        setColorKey(getHabitColorKey(currentHabit));\n        setHabit(currentHabit);\n    }, [appState])\n\n    const getThisWeeksTasks = (): number => {\n        const tasks = habit.CompletedTasks.filter((task: CompletedTask) => {\n            return isSameWeek(new Date(task.dateCompleted), new Date());\n        });\n        return tasks.length;\n    }\n\n    const generateWeekdaySummary = (): ReactElement[] => {\n        const weekStart: Date = startOfWeek(new Date());\n        const days: ReactElement[] = [];\n        for (let i=0; i < 7; i++) {\n            const day = add(weekStart, { days: i });\n            days.push(<WeekDay habit={habit} colorKey={colorKey} date={day} />);\n        }\n        return days;\n    }\n\n    return (\n        habit && <div className={`habit-overview habit-overview--${colorKey}`}>\n            <div className=\"habit-overview__header\">\n                <div className=\"ho__header__title\">\n                    <p>{habit.name}</p>\n                    <p>{habit.description}</p>\n                </div>\n                <div className=\"habit-overview__toggle\">\n                    <p>Today</p>\n                    <HabitCompleteToggle habit={habit} colorKey={colorKey} compact={true} date={new Date()} />\n                </div>\n            </div>\n            <div className=\"habit-overview__stats\">\n                <div className=\"habit-overview__stat\">\n                    <div>\n                        <Rocket />\n                        <p>{getThisWeeksTasks()}/{habit.weeklyGoal}</p>\n                    </div>\n                    <span>Weekly goal</span>\n                    <div className=\"progress-bar\">\n                        <div className=\"progress-bar--filler\" style={{ width: `${(getThisWeeksTasks()/habit.weeklyGoal)*100}%` }}></div>\n                    </div>\n                </div>\n                <div className=\"habit-overview__stat\">\n                    <div>\n                        <Trophy />\n                        <p>{habit.CompletedGoals.length}</p>\n                    </div>\n                    <span>Goals completed</span>\n                </div>\n                <div className=\"habit-overview__stat\">\n                    <div>\n                        <Done />\n                        <p>{habit.CompletedTasks.length}</p>\n                    </div>\n                    <span>Days completed</span>\n                </div>\n            </div>\n            <div className=\"habit-overview__week-summary\">\n                {generateWeekdaySummary()}\n            </div>\n        </div>\n    )\n}\n\nexport default HabitOverview;","/Users/mike/Documents/middi/app/src/components/GoalAchievementParty.tsx",["156"],"import React, { useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../App';\nimport Confetti from 'react-dom-confetti';\nimport { Events } from '../types';\nimport { EMIT_EVENT, MESSAGE_ADDED } from '../state/appReducer';\nimport { v4 as uuid } from 'uuid';\n\nconst GoalAchievementParty = () => {\n    const { appState, dispatch } = useContext(AppContext);\n    const [explode1, setExplode1] = useState(false);\n    const [explode2, setExplode2] = useState(false);\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.GOAL_COMPLETED) {\n            setExplode1(true);\n            setTimeout(() => {\n                setExplode2(true);\n            }, 200)\n            setExplode2(true);\n            dispatch({\n                type: EMIT_EVENT,\n                payload: null\n            });\n            dispatch({\n                type: MESSAGE_ADDED,\n                payload: {\n                    messageClass: 'message--initial',\n                    sender: 'bot',\n                    text: `Heck yeah! You achieved your weekly goal 🔥🔥🔥`,\n                    delay: 1000,\n                    showLoader: true,\n                    uuid: uuid()\n                }\n            });\n            setTimeout(() => {\n                setExplode1(false);\n                setExplode2(false);\n            }, 500)\n        }\n    }, [appState.eventEmitted])\n\n    const config = {\n        angle: 70,\n        spread: 60,\n        startVelocity: 40,\n        elementCount: 70,\n        dragFriction: 0.12,\n        duration: 1050,\n        stagger: 3,\n        width: \"10px\",\n        height: \"10px\",\n        colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n      };\n\n    return (\n        <div className=\"confetti-container\">\n            <Confetti active={explode1} config={config} />\n            <Confetti active={explode2} config={{ ...config, angle: 100 }} />\n        </div>\n    )\n}\n\nexport default GoalAchievementParty;",{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":1,"column":50,"nodeType":"163","messageId":"164","endLine":1,"endColumn":56},{"ruleId":"161","severity":1,"message":"165","line":8,"column":21,"nodeType":"163","messageId":"164","endLine":8,"endColumn":29},{"ruleId":"166","severity":1,"message":"167","line":25,"column":6,"nodeType":"168","endLine":25,"endColumn":18,"suggestions":"169"},{"ruleId":"166","severity":1,"message":"170","line":31,"column":6,"nodeType":"168","endLine":31,"endColumn":25,"suggestions":"171"},{"ruleId":"166","severity":1,"message":"172","line":29,"column":6,"nodeType":"168","endLine":29,"endColumn":8,"suggestions":"173"},{"ruleId":"166","severity":1,"message":"174","line":37,"column":8,"nodeType":"168","endLine":37,"endColumn":15,"suggestions":"175"},{"ruleId":"161","severity":1,"message":"162","line":1,"column":50,"nodeType":"163","messageId":"164","endLine":1,"endColumn":56},{"ruleId":"176","severity":1,"message":"177","line":15,"column":7,"nodeType":"163","messageId":"178","endLine":15,"endColumn":19},{"ruleId":"166","severity":1,"message":"179","line":26,"column":8,"nodeType":"168","endLine":26,"endColumn":31,"suggestions":"180"},{"ruleId":"181","severity":1,"message":"182","line":76,"column":25,"nodeType":"183","endLine":76,"endColumn":52},{"ruleId":"161","severity":1,"message":"162","line":1,"column":50,"nodeType":"163","messageId":"164","endLine":1,"endColumn":56},{"ruleId":"176","severity":1,"message":"184","line":15,"column":7,"nodeType":"163","messageId":"178","endLine":15,"endColumn":16},{"ruleId":"166","severity":1,"message":"179","line":26,"column":8,"nodeType":"168","endLine":26,"endColumn":31,"suggestions":"185"},{"ruleId":"161","severity":1,"message":"186","line":65,"column":11,"nodeType":"163","messageId":"164","endLine":65,"endColumn":27},{"ruleId":"181","severity":1,"message":"182","line":85,"column":25,"nodeType":"183","endLine":85,"endColumn":59},{"ruleId":"161","severity":1,"message":"187","line":1,"column":25,"nodeType":"163","messageId":"164","endLine":1,"endColumn":32},{"ruleId":"166","severity":1,"message":"179","line":35,"column":8,"nodeType":"168","endLine":35,"endColumn":31,"suggestions":"188"},{"ruleId":"161","severity":1,"message":"189","line":66,"column":25,"nodeType":"163","messageId":"164","endLine":66,"endColumn":29},{"ruleId":"161","severity":1,"message":"190","line":1,"column":17,"nodeType":"163","messageId":"164","endLine":1,"endColumn":25},{"ruleId":"166","severity":1,"message":"191","line":15,"column":8,"nodeType":"168","endLine":15,"endColumn":10,"suggestions":"192"},{"ruleId":"166","severity":1,"message":"193","line":33,"column":8,"nodeType":"168","endLine":33,"endColumn":10,"suggestions":"194"},{"ruleId":"161","severity":1,"message":"165","line":9,"column":23,"nodeType":"163","messageId":"164","endLine":9,"endColumn":31},{"ruleId":"166","severity":1,"message":"195","line":41,"column":8,"nodeType":"168","endLine":41,"endColumn":18,"suggestions":"196"},{"ruleId":"166","severity":1,"message":"197","line":40,"column":8,"nodeType":"168","endLine":40,"endColumn":31,"suggestions":"198"},"no-native-reassign",["199"],"no-negated-in-lhs",["200"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appState.messages' and 'messages'. Either include them or remove the dependency array.","ArrayExpression",["201"],"React Hook useEffect has missing dependencies: 'messages.length' and 'queueIndex'. Either include them or remove the dependency array. You can also do a functional update 'setQueueIndex(q => ...)' if you only need 'queueIndex' in the 'setQueueIndex' call.",["202"],"React Hook useEffect has a missing dependency: 'initializeApp'. Either include it or remove the dependency array.",["203"],"React Hook useEffect has missing dependencies: 'dispatch', 'message.dispatchOnSend', and 'typing'. Either include them or remove the dependency array. You can also do a functional update 'setTyping(t => ...)' if you only need 'typing' in the 'setTyping' call.",["204"],"@typescript-eslint/no-redeclare","'RegisterForm' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'submit'. Either include it or remove the dependency array.",["205"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'LoginForm' is already defined.",["206"],"'showRegistration' is assigned a value but never used.","'Message' is defined but never used.",["207"],"'name' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'habit'. Either include it or remove the dependency array. If 'setColorKey' needs the current value of 'habit', you can also switch to useReducer instead of useState and read 'habit' in the reducer.",["208"],"React Hook useEffect has missing dependencies: 'date' and 'habit.CompletedTasks'. Either include them or remove the dependency array.",["209"],"React Hook useEffect has a missing dependency: 'habitId'. Either include it or remove the dependency array.",["210"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["211"],"no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"220","fix":"222"},{"desc":"220","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},"Update the dependencies array to be: [appState.messages, messages, queueIndex]",{"range":"232","text":"233"},"Update the dependencies array to be: [appState.messages, messages.length, queueIndex]",{"range":"234","text":"235"},"Update the dependencies array to be: [initializeApp]",{"range":"236","text":"237"},"Update the dependencies array to be: [delay, dispatch, message.dispatchOnSend, typing]",{"range":"238","text":"239"},"Update the dependencies array to be: [appState.eventEmitted, submit]",{"range":"240","text":"241"},{"range":"242","text":"241"},{"range":"243","text":"241"},"Update the dependencies array to be: [habit]",{"range":"244","text":"245"},"Update the dependencies array to be: [date, habit.CompletedTasks]",{"range":"246","text":"247"},"Update the dependencies array to be: [appState, habitId]",{"range":"248","text":"249"},"Update the dependencies array to be: [appState.eventEmitted, dispatch]",{"range":"250","text":"251"},[843,855],"[appState.messages, messages, queueIndex]",[982,1001],"[appState.messages, messages.length, queueIndex]",[933,935],"[initializeApp]",[1212,1219],"[delay, dispatch, message.dispatchOnSend, typing]",[919,942],"[appState.eventEmitted, submit]",[935,958],[1080,1103],[437,439],"[habit]",[1287,1289],"[date, habit.CompletedTasks]",[1454,1464],"[appState, habitId]",[1350,1373],"[appState.eventEmitted, dispatch]"]