[{"/Users/mike/Documents/middi/app/src/index.js":"1","/Users/mike/Documents/middi/app/src/reportWebVitals.js":"2","/Users/mike/Documents/middi/app/src/state/appReducer.ts":"3","/Users/mike/Documents/middi/app/src/state/initialState.ts":"4","/Users/mike/Documents/middi/app/src/components/ChatBox.tsx":"5","/Users/mike/Documents/middi/app/src/App.js":"6","/Users/mike/Documents/middi/app/src/components/Message.tsx":"7","/Users/mike/Documents/middi/app/src/components/ActionButton.tsx":"8","/Users/mike/Documents/middi/app/src/state/dispatchHelper.ts":"9","/Users/mike/Documents/middi/app/src/components/Loading.tsx":"10","/Users/mike/Documents/middi/app/src/components/RegisterForm.tsx":"11","/Users/mike/Documents/middi/app/src/types.ts":"12","/Users/mike/Documents/middi/app/src/env.js":"13","/Users/mike/Documents/middi/app/src/sequences/introduction.ts":"14","/Users/mike/Documents/middi/app/src/sequences/auth.ts":"15","/Users/mike/Documents/middi/app/src/components/LoginForm.tsx":"16","/Users/mike/Documents/middi/app/src/state/api.ts":"17","/Users/mike/Documents/middi/app/src/sequences/habits.ts":"18","/Users/mike/Documents/middi/app/src/components/AddHabitForm.tsx":"19","/Users/mike/Documents/middi/app/src/components/ColorSelect.tsx":"20"},{"size":500,"mtime":1607646375032,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1607646375033,"results":"23","hashOfConfig":"22"},{"size":1480,"mtime":1607958660052,"results":"24","hashOfConfig":"22"},{"size":214,"mtime":1607958676475,"results":"25","hashOfConfig":"22"},{"size":1474,"mtime":1607871832384,"results":"26","hashOfConfig":"22"},{"size":1132,"mtime":1607959235272,"results":"27","hashOfConfig":"22"},{"size":1762,"mtime":1607809479599,"results":"28","hashOfConfig":"22"},{"size":357,"mtime":1607736862096,"results":"29","hashOfConfig":"22"},{"size":136,"mtime":1607740291105,"results":"30","hashOfConfig":"22"},{"size":293,"mtime":1607742098839,"results":"31","hashOfConfig":"22"},{"size":2950,"mtime":1607896661831,"results":"32","hashOfConfig":"22"},{"size":1269,"mtime":1607959099366,"results":"33","hashOfConfig":"22"},{"size":324,"mtime":1607960129418,"results":"34","hashOfConfig":"22"},{"size":1965,"mtime":1607966743655,"results":"35","hashOfConfig":"22"},{"size":3837,"mtime":1607958936607,"results":"36","hashOfConfig":"22"},{"size":2940,"mtime":1607896657039,"results":"37","hashOfConfig":"22"},{"size":1794,"mtime":1607958665990,"results":"38","hashOfConfig":"22"},{"size":998,"mtime":1607958745066,"results":"39","hashOfConfig":"22"},{"size":3834,"mtime":1607966617327,"results":"40","hashOfConfig":"22"},{"size":853,"mtime":1607966205474,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1uglca",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mike/Documents/middi/app/src/index.js",[],["92","93"],"/Users/mike/Documents/middi/app/src/reportWebVitals.js",[],"/Users/mike/Documents/middi/app/src/state/appReducer.ts",[],["94","95"],"/Users/mike/Documents/middi/app/src/state/initialState.ts",[],"/Users/mike/Documents/middi/app/src/components/ChatBox.tsx",["96","97","98"],"import React, { useState, useContext, useEffect } from 'react';\nimport { AppContext } from '../App';\nimport * as types from '../types';\nimport Message from './Message';\nimport ActionButton from './ActionButton';\n\nconst ChatBox = () => {\n  const { appState, dispatch } = useContext<types.Context>(AppContext);\n  const [queueIndex, setQueueIndex] = useState<number>(0);\n  const [messages, setMessages] = useState<types.Message[]>([]);\n\n  useEffect(() => {\n    const next = appState.messages[queueIndex]\n    const updatedMessages = [ ...messages, next ];\n    setMessages(updatedMessages);\n    if (queueIndex < appState.messages.length - 1) {\n      const delay = next.delay;\n      const timer = setTimeout(() => {\n        setQueueIndex(queueIndex + 1);\n      }, delay);\n      return () => {\n        clearTimeout(timer);\n      }\n    }\n  }, [queueIndex])\n\n  useEffect(() => {\n    if (messages.length !== appState.messages.length) {\n      setQueueIndex(queueIndex + 1);\n    }\n  }, [appState.messages])\n\n  return (\n    <div className=\"chatbox\">\n      <div className=\"chatbox__messages\">\n        {messages.map((message: types.Message) => (\n          message && <Message message={message} key={message.uuid} />\n        ))}\n      </div>\n      <div className=\"chatbox__actions\">\n        {appState.actions && appState.actions.map((action: types.Action) => (\n          <ActionButton action={action} key={action.uuid} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBox;\n","/Users/mike/Documents/middi/app/src/App.js",["99"],"import { createContext, useEffect, useReducer, useState } from 'react';\nimport { reducer } from './state/appReducer';\nimport { initialState } from './state/initialState';\nimport './styles/styles.scss';\nimport './components/ChatBox';\nimport ChatBox from './components/ChatBox';\nimport dispatchHelper from './state/dispatchHelper';\nimport { getAuthorizedUser, getHabits } from './state/api';\n\nexport const AppContext = createContext();\n\nconst App = () => {\n  const [appState, dispatch] = useReducer(reducer, initialState);\n  const [loading, setLoading] = useState(true);\n\n  const initializeApp = () => {\n    getAuthorizedUser(appState)\n    .then(() => {\n      getHabits()\n    })\n    .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    dispatchHelper.dispatch = (payload) => dispatch(payload);\n    Object.freeze(dispatchHelper);\n    initializeApp()\n  }, [])\n\n  return (\n    <AppContext.Provider value={{ appState, dispatch}}>\n      <div className=\"app\">\n        <header className=\"header\">Middi</header>\n        {!loading && <ChatBox loggedIn={false} />}\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","/Users/mike/Documents/middi/app/src/components/Message.tsx",["100"],"import React, { useEffect, useState, useContext } from 'react';\nimport * as types from '../types';\nimport Loading from './Loading';\nimport { AppContext } from '../App';\nimport { ReactComponent as Avatar } from './avatar.svg';\n\ntype MessageProps = {\n    message: types.Message;\n};\n\nconst Message = ({ message }: MessageProps) => {\n    const { dispatch } = useContext(AppContext);\n    const { delay, messageClass, text, sender, showLoader, Component } = message;\n    const [typing, setTyping] = useState(!!delay);\n    const [waiting, setWaiting] = useState(!!delay);\n\n    useEffect(() => {\n        const typingTimeout = setTimeout(() => {\n            setTyping(!typing);\n            if (message.dispatchOnSend) {\n                dispatch(message.dispatchOnSend);\n            }\n        }, delay)\n        const delayTimeout = setTimeout(() => {\n            setWaiting(!typing);\n        }, delay*0.2)\n        return () => {\n            clearTimeout(typingTimeout);\n            clearTimeout(delayTimeout);\n        };\n    }, [delay]);\n\n    return (\n        <>\n            { !waiting &&\n                (typing\n                    ? showLoader && <div className=\"message message--loading\">\n                        <Loading />\n                    </div>\n                    : <>\n                        <div className={`message message--sender-${sender} ${messageClass}`}>\n                            {messageClass === 'message--initial' && <Avatar />}\n                            {messageClass === 'component'\n                                ? <Component />\n                                : <p>{ text }</p>\n                            }\n                        </div>\n                    </>\n                )\n            }\n        </>\n    )\n};\n\nexport default Message;","/Users/mike/Documents/middi/app/src/components/ActionButton.tsx",[],"/Users/mike/Documents/middi/app/src/state/dispatchHelper.ts",[],"/Users/mike/Documents/middi/app/src/components/Loading.tsx",[],"/Users/mike/Documents/middi/app/src/components/RegisterForm.tsx",["101","102","103","104"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { postRegistrationSequence, loginSequence } from '../sequences/auth';\nimport { ReactComponent as Done } from './done.svg';\n\ntype RegisterForm = {\n    email: string;\n    password: string;\n    name: string;\n};\n\nconst RegisterForm = () => {\n    const { appState } = useContext(AppContext);\n    const [formData, setFormData] = useState<RegisterForm>({ name: '', email: '', password: '' });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [submitted, setSubmitted] = useState<boolean>(false);\n    const [error, setError] = useState<string>(' ');\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.REGISTRATION_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    const submit = () => {\n        setLoading(true);\n        fetch(`${env.apiUrl}/auth/register`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.err) {\n                setLoading(false);\n                setError(res.err.message);\n            }\n            else {\n                setLoading(false);\n                setSubmitted(true);\n                postRegistrationSequence(formData.name);\n            }\n        })\n    }\n\n    return (\n        <div className=\"register-form\">\n            <form>\n                <h3>👤 Sign Up</h3>\n                { loading \n                    ? <Loading />\n                    : !submitted\n                        ? <>\n                            <label>Nickname <input name=\"name\" type=\"text\" onChange={handleInputChange} placeholder=\"What should I call you?\" /></label>\n                            <label>Email <input name=\"email\" type=\"email\" onChange={handleInputChange} placeholder=\"Used for logging in\" /></label>\n                            <label>Password <input name=\"password\" type=\"password\" placeholder=\"Choose something strong\" onChange={handleInputChange} /></label>\n                        </>\n                        : <div className=\"form__placeholder-success\"><Done /></div>\n                }\n                {(!loading && !submitted) &&\n                    <div className=\"form__extra\">\n                        <p className=\"error\">{ error }</p>\n                        <a onClick={loginSequence}>Log In</a>\n                    </div>\n                }\n            </form>\n        </div>\n    )\n};\n\nexport default RegisterForm;","/Users/mike/Documents/middi/app/src/types.ts",[],"/Users/mike/Documents/middi/app/src/env.js",["105"],"export default {\n    apiUrl: process.env.NODE_ENV === 'development' ? 'http://localhost:8080/api' : 'https://middi-9hsdz.ondigitalocean.app/api',\n    habitColors: [\n        '#FFADAD',\n        '#FFD6A5',\n        '#FDFFB6',\n        '#CAFFBF',\n        '#9BF6FF',\n        '#A0C4FF',\n        '#BDB2FF',\n        '#FFC6FF'\n    ]\n};","/Users/mike/Documents/middi/app/src/sequences/introduction.ts",[],"/Users/mike/Documents/middi/app/src/sequences/auth.ts",[],"/Users/mike/Documents/middi/app/src/components/LoginForm.tsx",["106","107","108","109","110"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { postLoginSequence, registrationSequence } from '../sequences/auth';\nimport { ReactComponent as Done } from './done.svg';\nimport { EMIT_EVENT } from '../state/appReducer';\n\ntype LoginForm = {\n    email: string;\n    password: string;\n};\n\nconst LoginForm = () => {\n    const { appState, dispatch } = useContext(AppContext);\n    const [formData, setFormData] = useState<LoginForm>({ email: '', password: '' });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [submitted, setSubmitted] = useState<boolean>(false);\n    const [error, setError] = useState<string>(' ');\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.LOGIN_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    const submit = () => {\n        setError('')\n        setLoading(true);\n        fetch(`${env.apiUrl}/auth/login`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.err) {\n                setLoading(false);\n                setError(res.err.message);\n            }\n            else {\n                const { name } = res;\n                setLoading(false);\n                setSubmitted(true)\n                postLoginSequence(name, appState);\n            }\n            dispatch({\n                type: EMIT_EVENT,\n                payload: ''\n            })\n        });\n    }\n\n    const showRegistration = () => {\n\n    }\n\n    return (\n        <div className=\"form login-form\">\n            <form>\n                <h3>👤 Login</h3>\n                {loading\n                    ? <Loading />\n                    : !submitted \n                        ? <>\n                            <label>Email <input name=\"email\" type=\"email\" onChange={handleInputChange} /></label>\n                            <label>Password <input name=\"password\" type=\"password\" onChange={handleInputChange} /></label>\n                        </>\n                        : <div className=\"form__placeholder-success\"><Done /></div>\n                }\n                {(!loading && !submitted) &&\n                    <div className=\"form__extra\">\n                        <p className=\"error\">{ error }</p>\n                        <a onClick={registrationSequence}>Sign Up</a>\n                    </div>\n                }\n            </form>\n        </div>\n    )\n};\n\nexport default LoginForm;","/Users/mike/Documents/middi/app/src/state/api.ts",[],"/Users/mike/Documents/middi/app/src/sequences/habits.ts",["111"],"import { Events, Message } from '../types';\nimport { v4 as uuid } from 'uuid';\nimport dispatchHelper from '../state/dispatchHelper';\nimport { ACTIONS_SET, MESSAGE_ADDED, EMIT_EVENT } from '../state/appReducer';\nimport AddHabitForm from '../components/AddHabitForm';\n\n\nexport const addHabitSequence = () => {\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'component',\n            sender: 'bot',\n            text: null,\n            delay: 1000,\n            showLoader: false,\n            Component: AddHabitForm\n        }\n    });\n\n    // Submit button\n    dispatchHelper.dispatch({\n        type: ACTIONS_SET,\n        payload: [\n            { \n                uuid: uuid(),\n                label: 'Submit', \n                callback: () => {\n                    dispatchHelper.dispatch({\n                        type: EMIT_EVENT,\n                        payload: Events.HABIT_FORM_SUBMITTED\n                })\n            }}\n        ]\n    })\n}","/Users/mike/Documents/middi/app/src/components/AddHabitForm.tsx",["112","113"],"import React, { useState, useContext, useEffect } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { ReactComponent as Done } from './done.svg';\nimport { EMIT_EVENT } from '../state/appReducer';\nimport { getHabits } from '../state/api';\nimport ColorSelect from './ColorSelect';\n\ntype HabitForm = {\n    name: string;\n    description: string;\n    color: string;\n    weeklyGoal: number;\n};\n\nconst AddHabitForm = () => {\n    const defaultForm = {\n        name: '',\n        description: '',\n        color: '',\n        weeklyGoal: 7\n    };\n    const { appState, dispatch } = useContext(AppContext);\n    const [formData, setFormData] = useState<HabitForm>(defaultForm);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [submitted, setSubmitted] = useState<boolean>(false);\n    const [error, setError] = useState<string>(' ');\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.HABIT_FORM_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<any>) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    const submit = () => {\n        setError('')\n        setLoading(true);\n        fetch(`${env.apiUrl}/habits`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.err) {\n                setLoading(false);\n                setError(res.err.message);\n            }\n            else {\n                const { name } = res;\n                setLoading(false);\n                setSubmitted(true)\n                getHabits();\n            }\n            dispatch({\n                type: EMIT_EVENT,\n                payload: ''\n            })\n        });\n    }\n\n    return (\n        <div className=\"form add-habit-form\">\n            <form>\n                <h3>➕ New Habit</h3>\n                {loading\n                    ? <Loading />\n                    : !submitted \n                        ? <>\n                            <label>Name <input name=\"email\" type=\"text\" onChange={handleInputChange} \n                                placeholder=\"Drink 3 glasses of water, Do 10 pushups...\"\n                            /></label>\n                            <label>Description (optional) <textarea name=\"description\" rows={4} onChange={handleInputChange} /></label>\n                            <ColorSelect />\n                            <label>Weekly goal - how many times a week are you aiming to complete this goal?\n                                <select onChange={handleInputChange}>\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                    <option value=\"5\">5</option>\n                                    <option value=\"6\">6</option>\n                                    <option value=\"7\">7</option>\n                                </select>\n                            </label>\n                        </>\n                        : <div className=\"form__placeholder-success\"><Done /></div>\n                }\n                {(!loading && !submitted) &&\n                    <div className=\"form__extra\">\n                        <p className=\"error\">{ error }</p>\n                    </div>\n                }\n            </form>\n        </div>\n    )\n};\n\nexport default AddHabitForm;","/Users/mike/Documents/middi/app/src/components/ColorSelect.tsx",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":8,"column":21,"nodeType":"120","messageId":"121","endLine":8,"endColumn":29},{"ruleId":"122","severity":1,"message":"123","line":25,"column":6,"nodeType":"124","endLine":25,"endColumn":18,"suggestions":"125"},{"ruleId":"122","severity":1,"message":"126","line":31,"column":6,"nodeType":"124","endLine":31,"endColumn":25,"suggestions":"127"},{"ruleId":"122","severity":1,"message":"128","line":28,"column":6,"nodeType":"124","endLine":28,"endColumn":8,"suggestions":"129"},{"ruleId":"122","severity":1,"message":"130","line":31,"column":8,"nodeType":"124","endLine":31,"endColumn":15,"suggestions":"131"},{"ruleId":"118","severity":1,"message":"132","line":1,"column":50,"nodeType":"120","messageId":"121","endLine":1,"endColumn":56},{"ruleId":"133","severity":1,"message":"134","line":15,"column":7,"nodeType":"120","messageId":"135","endLine":15,"endColumn":19},{"ruleId":"122","severity":1,"message":"136","line":26,"column":8,"nodeType":"124","endLine":26,"endColumn":31,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":76,"column":25,"nodeType":"140","endLine":76,"endColumn":52},{"ruleId":"141","severity":1,"message":"142","line":1,"column":1,"nodeType":"143","endLine":13,"endColumn":3},{"ruleId":"118","severity":1,"message":"132","line":1,"column":50,"nodeType":"120","messageId":"121","endLine":1,"endColumn":56},{"ruleId":"133","severity":1,"message":"144","line":15,"column":7,"nodeType":"120","messageId":"135","endLine":15,"endColumn":16},{"ruleId":"122","severity":1,"message":"136","line":26,"column":8,"nodeType":"124","endLine":26,"endColumn":31,"suggestions":"145"},{"ruleId":"118","severity":1,"message":"146","line":65,"column":11,"nodeType":"120","messageId":"121","endLine":65,"endColumn":27},{"ruleId":"138","severity":1,"message":"139","line":85,"column":25,"nodeType":"140","endLine":85,"endColumn":59},{"ruleId":"118","severity":1,"message":"147","line":1,"column":18,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},{"ruleId":"122","severity":1,"message":"136","line":35,"column":8,"nodeType":"124","endLine":35,"endColumn":31,"suggestions":"148"},{"ruleId":"118","severity":1,"message":"149","line":62,"column":25,"nodeType":"120","messageId":"121","endLine":62,"endColumn":29},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"@typescript-eslint/no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appState.messages' and 'messages'. Either include them or remove the dependency array.","ArrayExpression",["152"],"React Hook useEffect has missing dependencies: 'messages.length' and 'queueIndex'. Either include them or remove the dependency array. You can also do a functional update 'setQueueIndex(q => ...)' if you only need 'queueIndex' in the 'setQueueIndex' call.",["153"],"React Hook useEffect has a missing dependency: 'initializeApp'. Either include it or remove the dependency array.",["154"],"React Hook useEffect has missing dependencies: 'dispatch', 'message.dispatchOnSend', and 'typing'. Either include them or remove the dependency array. You can also do a functional update 'setTyping(t => ...)' if you only need 'typing' in the 'setTyping' call.",["155"],"'useRef' is defined but never used.","@typescript-eslint/no-redeclare","'RegisterForm' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'submit'. Either include it or remove the dependency array.",["156"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'LoginForm' is already defined.",["157"],"'showRegistration' is assigned a value but never used.","'Message' is defined but never used.",["158"],"'name' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"167","fix":"169"},{"desc":"167","fix":"170"},"Update the dependencies array to be: [appState.messages, messages, queueIndex]",{"range":"171","text":"172"},"Update the dependencies array to be: [appState.messages, messages.length, queueIndex]",{"range":"173","text":"174"},"Update the dependencies array to be: [initializeApp]",{"range":"175","text":"176"},"Update the dependencies array to be: [delay, dispatch, message.dispatchOnSend, typing]",{"range":"177","text":"178"},"Update the dependencies array to be: [appState.eventEmitted, submit]",{"range":"179","text":"180"},{"range":"181","text":"180"},{"range":"182","text":"180"},[835,847],"[appState.messages, messages, queueIndex]",[974,993],"[appState.messages, messages.length, queueIndex]",[863,865],"[initializeApp]",[1018,1025],"[delay, dispatch, message.dispatchOnSend, typing]",[906,929],"[appState.eventEmitted, submit]",[922,945],[1074,1097]]