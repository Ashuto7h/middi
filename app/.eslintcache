[{"/Users/mike/Documents/middi/app/src/index.js":"1","/Users/mike/Documents/middi/app/src/reportWebVitals.js":"2","/Users/mike/Documents/middi/app/src/state/appReducer.ts":"3","/Users/mike/Documents/middi/app/src/state/initialState.ts":"4","/Users/mike/Documents/middi/app/src/components/ChatBox.tsx":"5","/Users/mike/Documents/middi/app/src/App.js":"6","/Users/mike/Documents/middi/app/src/components/Message.tsx":"7","/Users/mike/Documents/middi/app/src/components/ActionButton.tsx":"8","/Users/mike/Documents/middi/app/src/state/dispatchHelper.ts":"9","/Users/mike/Documents/middi/app/src/components/Loading.tsx":"10","/Users/mike/Documents/middi/app/src/components/RegisterForm.tsx":"11","/Users/mike/Documents/middi/app/src/types.ts":"12","/Users/mike/Documents/middi/app/src/sequences/introduction.ts":"13","/Users/mike/Documents/middi/app/src/sequences/auth.ts":"14","/Users/mike/Documents/middi/app/src/components/LoginForm.tsx":"15","/Users/mike/Documents/middi/app/src/state/api.ts":"16","/Users/mike/Documents/middi/app/src/sequences/habits.ts":"17","/Users/mike/Documents/middi/app/src/components/AddHabitForm.tsx":"18","/Users/mike/Documents/middi/app/src/components/ColorSelect.tsx":"19","/Users/mike/Documents/middi/app/src/components/HabitList.tsx":"20","/Users/mike/Documents/middi/app/src/components/HabitListItem.tsx":"21","/Users/mike/Documents/middi/app/src/env.ts":"22","/Users/mike/Documents/middi/app/src/state/modifiers.ts":"23"},{"size":500,"mtime":1607646375032,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1607646375033,"results":"26","hashOfConfig":"25"},{"size":1839,"mtime":1607999006216,"results":"27","hashOfConfig":"25"},{"size":214,"mtime":1607958676475,"results":"28","hashOfConfig":"25"},{"size":1741,"mtime":1607989762594,"results":"29","hashOfConfig":"25"},{"size":1132,"mtime":1607959235272,"results":"30","hashOfConfig":"25"},{"size":1771,"mtime":1607989940716,"results":"31","hashOfConfig":"25"},{"size":357,"mtime":1607736862096,"results":"32","hashOfConfig":"25"},{"size":136,"mtime":1607740291105,"results":"33","hashOfConfig":"25"},{"size":293,"mtime":1607742098839,"results":"34","hashOfConfig":"25"},{"size":2957,"mtime":1607992286326,"results":"35","hashOfConfig":"25"},{"size":1282,"mtime":1607999428853,"results":"36","hashOfConfig":"25"},{"size":2079,"mtime":1607970775547,"results":"37","hashOfConfig":"25"},{"size":4228,"mtime":1607989723297,"results":"38","hashOfConfig":"25"},{"size":2947,"mtime":1607992276073,"results":"39","hashOfConfig":"25"},{"size":2111,"mtime":1607998033755,"results":"40","hashOfConfig":"25"},{"size":1866,"mtime":1607993781131,"results":"41","hashOfConfig":"25"},{"size":3867,"mtime":1607990493009,"results":"42","hashOfConfig":"25"},{"size":1073,"mtime":1607988597816,"results":"43","hashOfConfig":"25"},{"size":700,"mtime":1607996787499,"results":"44","hashOfConfig":"25"},{"size":3337,"mtime":1607999720414,"results":"45","hashOfConfig":"25"},{"size":488,"mtime":1607991665838,"results":"46","hashOfConfig":"25"},{"size":1098,"mtime":1607999445862,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1uglca",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"55"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"55"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"/Users/mike/Documents/middi/app/src/index.js",[],["105","106"],"/Users/mike/Documents/middi/app/src/reportWebVitals.js",[],"/Users/mike/Documents/middi/app/src/state/appReducer.ts",[],["107","108"],"/Users/mike/Documents/middi/app/src/state/initialState.ts",[],"/Users/mike/Documents/middi/app/src/components/ChatBox.tsx",["109","110","111"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { AppContext } from '../App';\nimport * as types from '../types';\nimport Message from './Message';\nimport ActionButton from './ActionButton';\n\nconst AlwaysScrollToBottom = () => {\n  const elementRef = useRef<any>();\n  useEffect(() => elementRef.current.scrollIntoView());\n  return <div ref={elementRef} />;\n};\n\nconst ChatBox = () => {\n  const { appState, dispatch } = useContext<types.Context>(AppContext);\n  const [queueIndex, setQueueIndex] = useState<number>(0);\n  const [messages, setMessages] = useState<types.Message[]>([]);\n\n  useEffect(() => {\n    const next = appState.messages[queueIndex]\n    const updatedMessages = [ ...messages, next ];\n    setMessages(updatedMessages);\n    if (queueIndex < appState.messages.length - 1) {\n      const delay = next.delay;\n      const timer = setTimeout(() => {\n        setQueueIndex(queueIndex + 1);\n      }, delay);\n      return () => {\n        clearTimeout(timer);\n      }\n    }\n  }, [queueIndex])\n\n  useEffect(() => {\n    if (messages.length !== appState.messages.length) {\n      setQueueIndex(queueIndex + 1);\n    }\n  }, [appState.messages])\n\n  return (\n    <div className=\"chatbox\">\n      <div className=\"chatbox__messages\" >\n        {messages.map((message: types.Message) => (\n          message && <>\n            <Message message={message} key={message.uuid} />\n            <AlwaysScrollToBottom key={`${message.uuid}x`}/>\n          </>\n        ))}\n      </div>\n      <div className=\"chatbox__actions\">\n        {appState.actions && appState.actions.map((action: types.Action) => (\n          <ActionButton action={action} key={action.uuid} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBox;\n","/Users/mike/Documents/middi/app/src/App.js",["112"],"import { createContext, useEffect, useReducer, useState } from 'react';\nimport { reducer } from './state/appReducer';\nimport { initialState } from './state/initialState';\nimport './styles/styles.scss';\nimport './components/ChatBox';\nimport ChatBox from './components/ChatBox';\nimport dispatchHelper from './state/dispatchHelper';\nimport { getAuthorizedUser, getHabits } from './state/api';\n\nexport const AppContext = createContext();\n\nconst App = () => {\n  const [appState, dispatch] = useReducer(reducer, initialState);\n  const [loading, setLoading] = useState(true);\n\n  const initializeApp = () => {\n    getAuthorizedUser(appState)\n    .then(() => {\n      getHabits()\n    })\n    .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    dispatchHelper.dispatch = (payload) => dispatch(payload);\n    Object.freeze(dispatchHelper);\n    initializeApp()\n  }, [])\n\n  return (\n    <AppContext.Provider value={{ appState, dispatch}}>\n      <div className=\"app\">\n        <header className=\"header\">Middi</header>\n        {!loading && <ChatBox loggedIn={false} />}\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","/Users/mike/Documents/middi/app/src/components/Message.tsx",["113"],"import React, { useEffect, useState, useContext } from 'react';\nimport * as types from '../types';\nimport Loading from './Loading';\nimport { AppContext } from '../App';\nimport { ReactComponent as Avatar } from './avatar.svg';\n\ntype MessageProps = {\n    message: types.Message;\n};\n\nconst Message = ({ message }: MessageProps) => {\n    const { dispatch } = useContext(AppContext);\n    const { delay, messageClass, text, sender, showLoader, Component } = message;\n    const [typing, setTyping] = useState(!!delay);\n    const [waiting, setWaiting] = useState(!!delay);\n\n    useEffect(() => {\n        const typingTimeout = setTimeout(() => {\n            setTyping(!typing);\n            if (message.dispatchOnSend) {\n                dispatch(message.dispatchOnSend);\n            }\n        }, delay)\n        const delayTimeout = setTimeout(() => {\n            setWaiting(!typing);\n        }, delay*0.2)\n        return () => {\n            clearTimeout(typingTimeout);\n            clearTimeout(delayTimeout);\n        };\n    }, [delay]);\n\n    return (\n        <>\n            { !waiting &&\n                (typing\n                    ? showLoader && <div className=\"message message--loading\">\n                        <Loading />\n                    </div>\n                    : <>\n                        <div className={`message message--sender-${sender} ${messageClass}`}>\n                            {messageClass === 'message--initial' && <Avatar />}\n                            {messageClass === 'message--component'\n                                ? <Component />\n                                : <p>{ text }</p>\n                            }\n                        </div>\n                    </>\n                )\n            }\n        </>\n    )\n};\n\nexport default Message;","/Users/mike/Documents/middi/app/src/components/ActionButton.tsx",[],"/Users/mike/Documents/middi/app/src/state/dispatchHelper.ts",[],"/Users/mike/Documents/middi/app/src/components/Loading.tsx",[],"/Users/mike/Documents/middi/app/src/components/RegisterForm.tsx",["114","115","116","117"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { postRegistrationSequence, loginSequence } from '../sequences/auth';\nimport { ReactComponent as Done } from './done-shield.svg';\n\ntype RegisterForm = {\n    email: string;\n    password: string;\n    name: string;\n};\n\nconst RegisterForm = () => {\n    const { appState } = useContext(AppContext);\n    const [formData, setFormData] = useState<RegisterForm>({ name: '', email: '', password: '' });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [submitted, setSubmitted] = useState<boolean>(false);\n    const [error, setError] = useState<string>(' ');\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.REGISTRATION_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    const submit = () => {\n        setLoading(true);\n        fetch(`${env.apiUrl}/auth/register`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.err) {\n                setLoading(false);\n                setError(res.err.message);\n            }\n            else {\n                setLoading(false);\n                setSubmitted(true);\n                postRegistrationSequence(formData.name);\n            }\n        })\n    }\n\n    return (\n        <div className=\"register-form\">\n            <form>\n                <h3>👤 Sign Up</h3>\n                { loading \n                    ? <Loading />\n                    : !submitted\n                        ? <>\n                            <label>Nickname <input name=\"name\" type=\"text\" onChange={handleInputChange} placeholder=\"What should I call you?\" /></label>\n                            <label>Email <input name=\"email\" type=\"email\" onChange={handleInputChange} placeholder=\"Used for logging in\" /></label>\n                            <label>Password <input name=\"password\" type=\"password\" placeholder=\"Choose something strong\" onChange={handleInputChange} /></label>\n                        </>\n                        : <div className=\"form__placeholder-success\"><Done /></div>\n                }\n                {(!loading && !submitted) &&\n                    <div className=\"form__extra\">\n                        <p className=\"error\">{ error }</p>\n                        <a onClick={loginSequence}>Log In</a>\n                    </div>\n                }\n            </form>\n        </div>\n    )\n};\n\nexport default RegisterForm;","/Users/mike/Documents/middi/app/src/types.ts",[],"/Users/mike/Documents/middi/app/src/sequences/introduction.ts",[],"/Users/mike/Documents/middi/app/src/sequences/auth.ts",[],"/Users/mike/Documents/middi/app/src/components/LoginForm.tsx",["118","119","120","121","122"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { postLoginSequence, registrationSequence } from '../sequences/auth';\nimport { ReactComponent as Done } from './done-shield.svg';\nimport { EMIT_EVENT } from '../state/appReducer';\n\ntype LoginForm = {\n    email: string;\n    password: string;\n};\n\nconst LoginForm = () => {\n    const { appState, dispatch } = useContext(AppContext);\n    const [formData, setFormData] = useState<LoginForm>({ email: '', password: '' });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [submitted, setSubmitted] = useState<boolean>(false);\n    const [error, setError] = useState<string>(' ');\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.LOGIN_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    const submit = () => {\n        setError('')\n        setLoading(true);\n        fetch(`${env.apiUrl}/auth/login`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.err) {\n                setLoading(false);\n                setError(res.err.message);\n            }\n            else {\n                const { name } = res;\n                setLoading(false);\n                setSubmitted(true)\n                postLoginSequence(name, appState);\n            }\n            dispatch({\n                type: EMIT_EVENT,\n                payload: ''\n            })\n        });\n    }\n\n    const showRegistration = () => {\n\n    }\n\n    return (\n        <div className=\"form login-form\">\n            <form>\n                <h3>👤 Login</h3>\n                {loading\n                    ? <Loading />\n                    : !submitted \n                        ? <>\n                            <label>Email <input name=\"email\" type=\"email\" onChange={handleInputChange} /></label>\n                            <label>Password <input name=\"password\" type=\"password\" onChange={handleInputChange} /></label>\n                        </>\n                        : <div className=\"form__placeholder-success\"><Done /></div>\n                }\n                {(!loading && !submitted) &&\n                    <div className=\"form__extra\">\n                        <p className=\"error\">{ error }</p>\n                        <a onClick={registrationSequence}>Sign Up</a>\n                    </div>\n                }\n            </form>\n        </div>\n    )\n};\n\nexport default LoginForm;","/Users/mike/Documents/middi/app/src/state/api.ts",[],"/Users/mike/Documents/middi/app/src/sequences/habits.ts",["123"],"import { Events, Message } from '../types';\nimport { v4 as uuid } from 'uuid';\nimport dispatchHelper from '../state/dispatchHelper';\nimport { ACTIONS_SET, MESSAGE_ADDED, EMIT_EVENT } from '../state/appReducer';\nimport AddHabitForm from '../components/AddHabitForm';\nimport HabitList from '../components/HabitList';\nimport { startMessages } from './introduction';\n\n\nexport const addHabitSequence = () => {\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'message--component',\n            uuid: uuid(),\n            sender: 'bot',\n            text: null,\n            delay: 1000,\n            showLoader: false,\n            Component: AddHabitForm\n        }\n    });\n\n    // Submit button\n    dispatchHelper.dispatch({\n        type: ACTIONS_SET,\n        payload: [\n            { \n                uuid: uuid(),\n                label: 'Submit', \n                callback: () => {\n                    dispatchHelper.dispatch({\n                        type: EMIT_EVENT,\n                        payload: Events.HABIT_FORM_SUBMITTED\n                })\n            }}\n        ]\n    })\n}\n\n\nexport const viewHabitListSequence = () => {\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'message--component',\n            uuid: uuid(),\n            sender: 'bot',\n            text: null,\n            delay: 1000,\n            showLoader: false,\n            Component: HabitList\n        }\n    });\n\n    dispatchHelper.dispatch({\n        type: ACTIONS_SET,\n        payload: [\n            { \n                uuid: uuid(),\n                label: 'Save', \n                callback: () => {\n                    dispatchHelper.dispatch({\n                        type: MESSAGE_ADDED,\n                        payload: startMessages\n                })\n            }}\n        ]\n    })\n}","/Users/mike/Documents/middi/app/src/components/AddHabitForm.tsx",["124","125"],"import React, { useState, useContext, useEffect } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { ReactComponent as Done } from './done.svg';\nimport { EMIT_EVENT } from '../state/appReducer';\nimport { getHabits } from '../state/api';\nimport ColorSelect from './ColorSelect';\n\ntype HabitForm = {\n    name: string;\n    description: string;\n    color: string;\n    weeklyGoal: number;\n};\n\nconst AddHabitForm = () => {\n    const defaultForm = {\n        name: '',\n        description: '',\n        color: '',\n        weeklyGoal: 7\n    };\n    const { appState, dispatch } = useContext(AppContext);\n    const [formData, setFormData] = useState<HabitForm>(defaultForm);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [submitted, setSubmitted] = useState<boolean>(false);\n    const [error, setError] = useState<string>(' ');\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.HABIT_FORM_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<any>) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    const submit = () => {\n        setError('')\n        setLoading(true);\n        fetch(`${env.apiUrl}/habits`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.err) {\n                setLoading(false);\n                setError(res.err.message);\n            }\n            else {\n                const { name } = res;\n                setLoading(false);\n                setSubmitted(true)\n                getHabits();\n            }\n            dispatch({\n                type: EMIT_EVENT,\n                payload: ''\n            })\n        });\n    }\n\n    return (\n        <div className=\"form add-habit-form\">\n            <form>\n                <h3>➕ New Habit</h3>\n                {loading\n                    ? <Loading />\n                    : !submitted \n                        ? <>\n                            <label>Name <input name=\"name\" type=\"text\" onChange={handleInputChange} \n                                placeholder=\"Drink 3 glasses of water, Do 10 pushups...\"\n                            /></label>\n                            <label>Description (optional) <textarea name=\"description\" rows={4} onChange={handleInputChange} /></label>\n                            <ColorSelect onColorSelect={handleInputChange} />\n                            <label>Weekly goal - how many times a week are you aiming to complete this goal?\n                                <select onChange={handleInputChange}>\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                    <option value=\"5\">5</option>\n                                    <option value=\"6\">6</option>\n                                    <option value=\"7\">7</option>\n                                </select>\n                            </label>\n                        </>\n                        : <div className=\"form__placeholder-success\"><Done /></div>\n                }\n                {(!loading && !submitted) &&\n                    <div className=\"form__extra\">\n                        <p className=\"error\">{ error }</p>\n                    </div>\n                }\n            </form>\n        </div>\n    )\n};\n\nexport default AddHabitForm;","/Users/mike/Documents/middi/app/src/components/ColorSelect.tsx",[],"/Users/mike/Documents/middi/app/src/components/HabitList.tsx",["126"],"import React, { useState, useContext } from 'react';\nimport { AppContext } from '../App';\nimport HabitListItem from './HabitListItem';\nimport format from 'date-fns/format';\nimport { Habit } from '../types';\n\nconst HabitList = () => {\n    const { appState } = useContext(AppContext);\n\n    return (\n        <div className=\"habit-list\">\n            <p className=\"habit-list__title\">{format(new Date(), 'EEEE, do LLLL yyyy')}</p>\n            <p className=\"habit-list__subtitle\">Toggle a habit to complete it for today</p>\n            {appState.habits.map((habit: Habit) => (\n                <HabitListItem habit={habit} key={habit.id} />\n            ))}\n        </div>\n    )\n};\n\nexport default HabitList;","/Users/mike/Documents/middi/app/src/components/HabitListItem.tsx",["127"],"import React, { useEffect, useState, useContext } from 'react';\nimport { AppContext } from '../App';\nimport { CompletedTask, Habit } from '../types';\nimport env from '../env';\nimport Switch from 'react-switch';\nimport isSameDay from 'date-fns/isSameDay';\nimport { ReactComponent as Balloons } from './balloons.svg';\nimport { saveTaskState } from '../state/api';\nimport { ADD_COMPLETED_TASK, REMOVE_COMPLETED_TASK } from '../state/appReducer';\n\ntype HabitListItemProps = {\n    habit: Habit\n};\n\nconst HabitListItem = ({ habit }: HabitListItemProps) => {\n    const { dispatch } = useContext(AppContext);\n    const [colorKey, setColorKey] = useState<string>('');\n    const [isCompletedToday, setIsCompletedToday] = useState<boolean>(false);\n    const [completedTask, setCompletedTask] = useState<CompletedTask | null>(null);\n    const [celebrate, setCelebrate] = useState<boolean>(false);\n\n    useEffect(() => {\n        const values = Object.values(env.habitColors);\n        const keys = Object.keys(env.habitColors);\n        const index = values.indexOf(habit.color);\n        setColorKey(keys[index]);\n\n        const completedToday = habit.CompletedTasks.find((task: CompletedTask) => {\n            return isSameDay(new Date(task.dateCompleted), new Date());\n        });\n        if (completedToday) {\n            setIsCompletedToday(true);\n            setCompletedTask(completedToday);\n        }\n    }, [])\n\n    const onCompleteToggle = (val: boolean) => {\n        if (completedTask) {\n            console.log('Deleteing...')\n            saveTaskState(completedTask, 'DELETE')\n            .then(res => {\n                setIsCompletedToday(val);\n                dispatch({\n                    type: REMOVE_COMPLETED_TASK,\n                    payload: completedTask\n                });\n            });\n        }\n        else {\n            console.log('Creating...')\n            const newTask: CompletedTask = {\n                HabitId: habit.id,\n                dateCompleted: Date.now().toString(),\n            };\n            saveTaskState(newTask, 'POST')\n                .then(res => {\n                    setCelebrate(val);\n                    setIsCompletedToday(val);\n                    setCompletedTask(res.completedTask);\n                    dispatch({\n                        type: ADD_COMPLETED_TASK,\n                        payload: res.completedTask\n                    });\n                });\n        }\n    }\n\n    return (\n        <div className={`habit-list__item habit-list__item--${colorKey}`}>\n            {habit.name}\n            <div>\n                {isCompletedToday && <p>Nice job! 🎉</p>}\n                <label>\n                    <Switch \n                        checked={isCompletedToday}\n                        onChange={onCompleteToggle}\n                        onColor={env.habitColors[colorKey]}\n                        handleDiameter={30}\n                        uncheckedIcon={false}\n                        checkedIcon={false}\n                        boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n                        activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n                        height={20}\n                        width={48}\n                    />\n                </label>\n            </div>\n            {celebrate && <Balloons />}\n        </div>\n    )\n};\n\nexport default HabitListItem","/Users/mike/Documents/middi/app/src/env.ts",[],"/Users/mike/Documents/middi/app/src/state/modifiers.ts",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":14,"column":21,"nodeType":"134","messageId":"135","endLine":14,"endColumn":29},{"ruleId":"136","severity":1,"message":"137","line":31,"column":6,"nodeType":"138","endLine":31,"endColumn":18,"suggestions":"139"},{"ruleId":"136","severity":1,"message":"140","line":37,"column":6,"nodeType":"138","endLine":37,"endColumn":25,"suggestions":"141"},{"ruleId":"136","severity":1,"message":"142","line":28,"column":6,"nodeType":"138","endLine":28,"endColumn":8,"suggestions":"143"},{"ruleId":"136","severity":1,"message":"144","line":31,"column":8,"nodeType":"138","endLine":31,"endColumn":15,"suggestions":"145"},{"ruleId":"132","severity":1,"message":"146","line":1,"column":50,"nodeType":"134","messageId":"135","endLine":1,"endColumn":56},{"ruleId":"147","severity":1,"message":"148","line":15,"column":7,"nodeType":"134","messageId":"149","endLine":15,"endColumn":19},{"ruleId":"136","severity":1,"message":"150","line":26,"column":8,"nodeType":"138","endLine":26,"endColumn":31,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":76,"column":25,"nodeType":"154","endLine":76,"endColumn":52},{"ruleId":"132","severity":1,"message":"146","line":1,"column":50,"nodeType":"134","messageId":"135","endLine":1,"endColumn":56},{"ruleId":"147","severity":1,"message":"155","line":15,"column":7,"nodeType":"134","messageId":"149","endLine":15,"endColumn":16},{"ruleId":"136","severity":1,"message":"150","line":26,"column":8,"nodeType":"138","endLine":26,"endColumn":31,"suggestions":"156"},{"ruleId":"132","severity":1,"message":"157","line":65,"column":11,"nodeType":"134","messageId":"135","endLine":65,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":85,"column":25,"nodeType":"154","endLine":85,"endColumn":59},{"ruleId":"132","severity":1,"message":"158","line":1,"column":18,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"136","severity":1,"message":"150","line":35,"column":8,"nodeType":"138","endLine":35,"endColumn":31,"suggestions":"159"},{"ruleId":"132","severity":1,"message":"160","line":62,"column":25,"nodeType":"134","messageId":"135","endLine":62,"endColumn":29},{"ruleId":"132","severity":1,"message":"161","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"136","severity":1,"message":"162","line":35,"column":8,"nodeType":"138","endLine":35,"endColumn":10,"suggestions":"163"},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"@typescript-eslint/no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appState.messages' and 'messages'. Either include them or remove the dependency array.","ArrayExpression",["166"],"React Hook useEffect has missing dependencies: 'messages.length' and 'queueIndex'. Either include them or remove the dependency array. You can also do a functional update 'setQueueIndex(q => ...)' if you only need 'queueIndex' in the 'setQueueIndex' call.",["167"],"React Hook useEffect has a missing dependency: 'initializeApp'. Either include it or remove the dependency array.",["168"],"React Hook useEffect has missing dependencies: 'dispatch', 'message.dispatchOnSend', and 'typing'. Either include them or remove the dependency array. You can also do a functional update 'setTyping(t => ...)' if you only need 'typing' in the 'setTyping' call.",["169"],"'useRef' is defined but never used.","@typescript-eslint/no-redeclare","'RegisterForm' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'submit'. Either include it or remove the dependency array.",["170"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'LoginForm' is already defined.",["171"],"'showRegistration' is assigned a value but never used.","'Message' is defined but never used.",["172"],"'name' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'habit.CompletedTasks' and 'habit.color'. Either include them or remove the dependency array.",["173"],"no-global-assign","no-unsafe-negation",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"182","fix":"184"},{"desc":"182","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [appState.messages, messages, queueIndex]",{"range":"188","text":"189"},"Update the dependencies array to be: [appState.messages, messages.length, queueIndex]",{"range":"190","text":"191"},"Update the dependencies array to be: [initializeApp]",{"range":"192","text":"193"},"Update the dependencies array to be: [delay, dispatch, message.dispatchOnSend, typing]",{"range":"194","text":"195"},"Update the dependencies array to be: [appState.eventEmitted, submit]",{"range":"196","text":"197"},{"range":"198","text":"197"},{"range":"199","text":"197"},"Update the dependencies array to be: [habit.CompletedTasks, habit.color]",{"range":"200","text":"201"},[1011,1023],"[appState.messages, messages, queueIndex]",[1150,1169],"[appState.messages, messages.length, queueIndex]",[863,865],"[initializeApp]",[1018,1025],"[delay, dispatch, message.dispatchOnSend, typing]",[913,936],"[appState.eventEmitted, submit]",[929,952],[1074,1097],[1400,1402],"[habit.CompletedTasks, habit.color]"]