[{"/Users/mike/Documents/middi/app/src/index.js":"1","/Users/mike/Documents/middi/app/src/reportWebVitals.js":"2","/Users/mike/Documents/middi/app/src/state/appReducer.ts":"3","/Users/mike/Documents/middi/app/src/state/initialState.ts":"4","/Users/mike/Documents/middi/app/src/components/ChatBox.tsx":"5","/Users/mike/Documents/middi/app/src/App.js":"6","/Users/mike/Documents/middi/app/src/components/Message.tsx":"7","/Users/mike/Documents/middi/app/src/components/ActionButton.tsx":"8","/Users/mike/Documents/middi/app/src/state/dispatchHelper.ts":"9","/Users/mike/Documents/middi/app/src/components/Loading.tsx":"10","/Users/mike/Documents/middi/app/src/components/RegisterForm.tsx":"11","/Users/mike/Documents/middi/app/src/types.ts":"12","/Users/mike/Documents/middi/app/src/env.js":"13","/Users/mike/Documents/middi/app/src/sequences/introduction.ts":"14","/Users/mike/Documents/middi/app/src/sequences/auth.ts":"15","/Users/mike/Documents/middi/app/src/components/LoginForm.tsx":"16"},{"size":500,"mtime":1607646375032,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1607646375033,"results":"19","hashOfConfig":"18"},{"size":1347,"mtime":1607820090347,"results":"20","hashOfConfig":"18"},{"size":198,"mtime":1607830192677,"results":"21","hashOfConfig":"18"},{"size":1504,"mtime":1607824164353,"results":"22","hashOfConfig":"18"},{"size":1871,"mtime":1607830613392,"results":"23","hashOfConfig":"18"},{"size":1762,"mtime":1607809479599,"results":"24","hashOfConfig":"18"},{"size":357,"mtime":1607736862096,"results":"25","hashOfConfig":"18"},{"size":136,"mtime":1607740291105,"results":"26","hashOfConfig":"18"},{"size":293,"mtime":1607742098839,"results":"27","hashOfConfig":"18"},{"size":1955,"mtime":1607814832711,"results":"28","hashOfConfig":"18"},{"size":807,"mtime":1607819554469,"results":"29","hashOfConfig":"18"},{"size":147,"mtime":1607830922855,"results":"30","hashOfConfig":"18"},{"size":1817,"mtime":1607830465822,"results":"31","hashOfConfig":"18"},{"size":3703,"mtime":1607828728014,"results":"32","hashOfConfig":"18"},{"size":2218,"mtime":1607827700886,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1uglca",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"41"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"41"},"/Users/mike/Documents/middi/app/src/index.js",[],["76","77"],"/Users/mike/Documents/middi/app/src/reportWebVitals.js",[],"/Users/mike/Documents/middi/app/src/state/appReducer.ts",[],["78","79"],"/Users/mike/Documents/middi/app/src/state/initialState.ts",[],"/Users/mike/Documents/middi/app/src/components/ChatBox.tsx",["80","81","82"],"import React, { useState, useContext, useEffect } from 'react';\nimport { AppContext } from '../App';\nimport * as types from '../types';\nimport Message from './Message';\nimport ActionButton from './ActionButton';\nimport { v4 as uuid } from 'uuid';\n\nconst ChatBox = () => {\n  const { appState, dispatch } = useContext<types.Context>(AppContext);\n  const [queueIndex, setQueueIndex] = useState<number>(0);\n  const [messages, setMessages] = useState<types.Message[]>([]);\n\n  useEffect(() => {\n    const next = appState.messages[queueIndex]\n    const updatedMessages = [ ...messages, next ];\n    setMessages(updatedMessages);\n    if (queueIndex < appState.messages.length - 1) {\n      const delay = next.delay;\n      const timer = setTimeout(() => {\n        setQueueIndex(queueIndex + 1);\n      }, delay);\n      return () => {\n        clearTimeout(timer);\n      }\n    }\n  }, [queueIndex])\n\n  useEffect(() => {\n    if (messages.length !== appState.messages.length) {\n      setQueueIndex(queueIndex + 1);\n    }\n  }, [appState.messages])\n\n  return (\n    <div className=\"chatbox\">\n      <div className=\"chatbox__messages\">\n        {messages.map((message: types.Message) => (\n          message && <Message message={message} key={message.uuid} />\n        ))}\n      </div>\n      <div className=\"chatbox__actions\">\n        {appState.actions && appState.actions.map((action: types.Action) => (\n          <ActionButton action={action} key={uuid()} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBox;\n","/Users/mike/Documents/middi/app/src/App.js",["83","84"],"import { createContext, useEffect, useReducer, useState } from 'react';\nimport { AUTH_STATE_CHANGED, MESSAGE_ADDED, reducer, SET_STATE } from './state/appReducer';\nimport { initialState } from './state/initialState';\nimport './styles/styles.scss';\nimport './components/ChatBox';\nimport ChatBox from './components/ChatBox';\nimport dispatchHelper from './state/dispatchHelper';\nimport env from './env';\nimport { authenticatedIntroSequence, unauthenticatedIntroSequence } from './sequences/introduction';\n\nexport const AppContext = createContext();\n\nconst App = () => {\n  const [appState, dispatch] = useReducer(reducer, initialState);\n  const [loading, setLoading] = useState(true);\n\n\n  const initializeApp = () => {\n    fetch(`${env.apiUrl}/auth/auth-user`, {\n      credentials: 'include',\n    })\n    .then(res => res.json())\n    .then(res => {\n      // authenticated user\n      dispatch({\n        type: SET_STATE,\n        payload: {\n          ...appState,\n          messages: authenticatedIntroSequence(res.user.name)\n        }\n      });\n      dispatch({\n        type: AUTH_STATE_CHANGED,\n        payload: {\n          loggedIn: true,\n          name: res.user.name\n        }\n      });\n    })\n    .catch(() => {\n      // unauthenticated user\n      dispatch({\n        type: SET_STATE,\n        payload: {\n          ...appState,\n          messages: unauthenticatedIntroSequence()\n        }\n      });\n    })\n    .finally(() => {\n      setLoading(false);\n    })\n  }\n\n  useEffect(() => {\n    dispatchHelper.dispatch = (payload) => dispatch(payload);\n    Object.freeze(dispatchHelper);\n    initializeApp()\n  }, [])\n\n  return (\n    <AppContext.Provider value={{ appState, dispatch}}>\n      <div className=\"app\">\n        <header className=\"header\">Middi</header>\n        {!loading && <ChatBox loggedIn={false} />}\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","/Users/mike/Documents/middi/app/src/components/Message.tsx",["85"],"import React, { useEffect, useState, useContext } from 'react';\nimport * as types from '../types';\nimport Loading from './Loading';\nimport { AppContext } from '../App';\nimport { ReactComponent as Avatar } from './avatar.svg';\n\ntype MessageProps = {\n    message: types.Message;\n};\n\nconst Message = ({ message }: MessageProps) => {\n    const { dispatch } = useContext(AppContext);\n    const { delay, messageClass, text, sender, showLoader, Component } = message;\n    const [typing, setTyping] = useState(!!delay);\n    const [waiting, setWaiting] = useState(!!delay);\n\n    useEffect(() => {\n        const typingTimeout = setTimeout(() => {\n            setTyping(!typing);\n            if (message.dispatchOnSend) {\n                dispatch(message.dispatchOnSend);\n            }\n        }, delay)\n        const delayTimeout = setTimeout(() => {\n            setWaiting(!typing);\n        }, delay*0.2)\n        return () => {\n            clearTimeout(typingTimeout);\n            clearTimeout(delayTimeout);\n        };\n    }, [delay]);\n\n    return (\n        <>\n            { !waiting &&\n                (typing\n                    ? showLoader && <div className=\"message message--loading\">\n                        <Loading />\n                    </div>\n                    : <>\n                        <div className={`message message--sender-${sender} ${messageClass}`}>\n                            {messageClass === 'message--initial' && <Avatar />}\n                            {messageClass === 'component'\n                                ? <Component />\n                                : <p>{ text }</p>\n                            }\n                        </div>\n                    </>\n                )\n            }\n        </>\n    )\n};\n\nexport default Message;","/Users/mike/Documents/middi/app/src/components/ActionButton.tsx",[],"/Users/mike/Documents/middi/app/src/state/dispatchHelper.ts",[],"/Users/mike/Documents/middi/app/src/components/Loading.tsx",[],["86","87"],"/Users/mike/Documents/middi/app/src/components/RegisterForm.tsx",["88","89","90"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { postRegistrationSequence } from '../sequences/auth';\n\ntype RegisterForm = {\n    email: string;\n    password: string;\n    name: string;\n};\n\nconst RegisterForm = () => {\n    const { appState } = useContext(AppContext);\n    const [formData, setFormData] = useState({ name: '', email: '', password: '' });\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.REGISTRATION_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    const submit = () => {\n        setLoading(true);\n        fetch(`${env.apiUrl}/auth/register`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        }).then(res => {\n            setLoading(false);\n            postRegistrationSequence();\n        })\n    }\n\n    return (\n        <div className=\"register-form\">\n            { loading\n                ? <Loading />\n                : <form>\n                    <label>Nickname <input name=\"name\" type=\"text\" onChange={handleInputChange} placeholder=\"What should I call you?\" /></label>\n                    <label>Email <input name=\"email\" type=\"email\" onChange={handleInputChange} placeholder=\"Used for logging in\" /></label>\n                    <label>Password <input name=\"password\" type=\"password\" placeholder=\"Choose something strong\" onChange={handleInputChange} /></label>\n                </form>\n            }\n        </div>\n    )\n};\n\nexport default RegisterForm;","/Users/mike/Documents/middi/app/src/types.ts",[],"/Users/mike/Documents/middi/app/src/env.js",["91"],"export default {\n    apiUrl: process.env.NODE_ENV === 'development' ? 'http://localhost:8080/api' : 'https://middi-9hsdz.ondigitalocean.app/api'\n};","/Users/mike/Documents/middi/app/src/sequences/introduction.ts",[],"/Users/mike/Documents/middi/app/src/sequences/auth.ts",["92"],"import dispatchHelper from '../state/dispatchHelper';\nimport { ACTIONS_SET, MESSAGE_ADDED, EMIT_EVENT, LAST_MESSAGE_REMOVED, AUTH_STATE_CHANGED, SET_STATE } from '../state/appReducer';\nimport RegisterForm from '../components/RegisterForm';\nimport { AppState, Events, Message } from '../types';\nimport LoginForm from '../components/LoginForm';\nimport { v4 as uuid } from 'uuid';\n\nexport const registrationSequence = (): void => {\n    // Add registration component\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'component',\n            sender: 'bot',\n            text: null,\n            delay: 1000,\n            showLoader: false,\n            Component: RegisterForm\n        }\n    })\n    // Submit button\n    dispatchHelper.dispatch({\n        type: ACTIONS_SET,\n        payload: [\n            { label: 'Submit', callback: () => {\n                dispatchHelper.dispatch({\n                    type: EMIT_EVENT,\n                    payload: Events.REGISTRATION_SUBMITTED\n                })\n            }}\n        ]\n    })\n}\n\nexport const loginSequence = (): void => {\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'component',\n            sender: 'bot',\n            text: null,\n            delay: 1000,\n            showLoader: false,\n            Component: LoginForm\n        }\n    })\n    dispatchHelper.dispatch({\n        type: ACTIONS_SET,\n        payload: [\n            { label: 'Submit', callback: () => {\n                dispatchHelper.dispatch({\n                    type: EMIT_EVENT,\n                    payload: Events.LOGIN_SUBMITTED\n                })\n            }}\n        ]\n    })\n}\n\nexport const postRegistrationSequence = () => {\n    dispatchHelper.dispatch({\n        type: LAST_MESSAGE_REMOVED,\n        payload: null\n    })\n\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'message--inital',\n            sender: 'bot',\n            text: `Nice job! We're on our way to helping you track your adherence 🚀`,\n            delay: 1500,\n            showLoader: false\n        }\n    });\n\n    dispatchHelper.dispatch({\n        type: MESSAGE_ADDED,\n        payload: {\n            messageClass: 'message--grouped',\n            sender: 'bot',\n            text: `First thing's first though, let's get an inhaler setup for you to track`,\n            delay: 1500,\n            showLoader: true\n        }\n    });\n}\n\nexport const postLoginSequence = (name: string, state: AppState) => {\n\n    const messagesToAdd: Message[] = [\n        {\n            messageClass: 'message--initial',\n            sender: 'bot',\n            text: `Welcome back ${name}! Good to see you again 😁`,\n            delay: 1500,\n            showLoader: false,\n            uuid: uuid()\n        },\n        {\n            messageClass: 'message--grouped',\n            sender: 'bot',\n            text: `How can I help you today?`,\n            delay: 1500,\n            showLoader: true,\n            uuid: uuid(),\n            dispatchOnSend: {\n                type: 'ACTIONS_SET',\n                payload: [{\n                    label: 'Record a puff',\n                    callback: () => {\n\n                    }\n                },\n                {\n                    label: 'Add an inhaler',\n                    callback: loginSequence\n                }]\n            }\n        }\n    ]\n\n    const newState: AppState = {\n        ...state,\n        auth: {\n            loggedIn: true,\n            name\n        },\n        messages: [ ...state.messages, ...messagesToAdd ]\n    }\n\n    dispatchHelper.dispatch({\n        type: SET_STATE,\n        payload: newState\n    });\n}","/Users/mike/Documents/middi/app/src/components/LoginForm.tsx",["93","94","95","96","97"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { AppContext } from '../App';\nimport { Events } from '../types';\nimport env from '../env';\nimport Loading from './Loading';\nimport { postLoginSequence, postRegistrationSequence } from '../sequences/auth';\nimport { ReactComponent as Done } from './done.svg';\n\ntype LoginForm = {\n    email: string;\n    password: string;\n};\n\nconst LoginForm = () => {\n    const { appState, dispatch } = useContext(AppContext);\n    const [formData, setFormData] = useState({ name: '', email: '', password: '' });\n    const [loading, setLoading] = useState(false);\n    const [submitted, setSubmitted] = useState(false);\n\n    useEffect(() => {\n        if (appState.eventEmitted === Events.LOGIN_SUBMITTED) {\n            submit();\n        }\n    }, [appState.eventEmitted])\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    const submit = () => {\n        setLoading(true);\n        fetch(`${env.apiUrl}/auth/login`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(res => res.json())\n        .then(res => {\n            const { name } = res;\n            setLoading(false);\n            setSubmitted(true)\n            postLoginSequence(name, appState);\n        })\n    }\n\n    return (\n        <div className=\"form login-form\">\n            <form>\n                <h3>👤 Login</h3>\n                {loading\n                    ? <Loading />\n                    : !submitted \n                        ? <>\n                            <label>Email <input name=\"email\" type=\"email\" onChange={handleInputChange} /></label>\n                            <label>Password <input name=\"password\" type=\"password\" onChange={handleInputChange} /></label>\n                        </>\n                        : <div className=\"form__placeholder-success\"><Done /></div>\n                }\n            </form>\n        </div>\n    )\n};\n\nexport default LoginForm;",{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":9,"column":21,"nodeType":"104","messageId":"105","endLine":9,"endColumn":29},{"ruleId":"106","severity":1,"message":"107","line":26,"column":6,"nodeType":"108","endLine":26,"endColumn":18,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"110","line":32,"column":6,"nodeType":"108","endLine":32,"endColumn":25,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":2,"column":30,"nodeType":"104","messageId":"105","endLine":2,"endColumn":43},{"ruleId":"106","severity":1,"message":"114","line":59,"column":6,"nodeType":"108","endLine":59,"endColumn":8,"suggestions":"115"},{"ruleId":"106","severity":1,"message":"116","line":31,"column":8,"nodeType":"108","endLine":31,"endColumn":15,"suggestions":"117"},{"ruleId":"98","replacedBy":"118"},{"ruleId":"100","replacedBy":"119"},{"ruleId":"102","severity":1,"message":"120","line":1,"column":50,"nodeType":"104","messageId":"105","endLine":1,"endColumn":56},{"ruleId":"121","severity":1,"message":"122","line":14,"column":7,"nodeType":"104","messageId":"123","endLine":14,"endColumn":19},{"ruleId":"106","severity":1,"message":"124","line":23,"column":8,"nodeType":"108","endLine":23,"endColumn":31,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":1,"column":1,"nodeType":"128","endLine":3,"endColumn":3},{"ruleId":"102","severity":1,"message":"129","line":2,"column":72,"nodeType":"104","messageId":"105","endLine":2,"endColumn":90},{"ruleId":"102","severity":1,"message":"120","line":1,"column":50,"nodeType":"104","messageId":"105","endLine":1,"endColumn":56},{"ruleId":"102","severity":1,"message":"130","line":6,"column":29,"nodeType":"104","messageId":"105","endLine":6,"endColumn":53},{"ruleId":"121","severity":1,"message":"131","line":14,"column":7,"nodeType":"104","messageId":"123","endLine":14,"endColumn":16},{"ruleId":"102","severity":1,"message":"103","line":15,"column":23,"nodeType":"104","messageId":"105","endLine":15,"endColumn":31},{"ruleId":"106","severity":1,"message":"124","line":24,"column":8,"nodeType":"108","endLine":24,"endColumn":31,"suggestions":"132"},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"@typescript-eslint/no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appState.messages' and 'messages'. Either include them or remove the dependency array.","ArrayExpression",["135"],"React Hook useEffect has missing dependencies: 'messages.length' and 'queueIndex'. Either include them or remove the dependency array. You can also do a functional update 'setQueueIndex(q => ...)' if you only need 'queueIndex' in the 'setQueueIndex' call.",["136"],"no-unused-vars","'MESSAGE_ADDED' is defined but never used.","React Hook useEffect has a missing dependency: 'initializeApp'. Either include it or remove the dependency array.",["137"],"React Hook useEffect has missing dependencies: 'dispatch', 'message.dispatchOnSend', and 'typing'. Either include them or remove the dependency array. You can also do a functional update 'setTyping(t => ...)' if you only need 'typing' in the 'setTyping' call.",["138"],["133"],["134"],"'useRef' is defined but never used.","@typescript-eslint/no-redeclare","'RegisterForm' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'submit'. Either include it or remove the dependency array.",["139"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'AUTH_STATE_CHANGED' is defined but never used.","'postRegistrationSequence' is defined but never used.","'LoginForm' is already defined.",["140"],"no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"149","fix":"151"},"Update the dependencies array to be: [appState.messages, messages, queueIndex]",{"range":"152","text":"153"},"Update the dependencies array to be: [appState.messages, messages.length, queueIndex]",{"range":"154","text":"155"},"Update the dependencies array to be: [initializeApp]",{"range":"156","text":"157"},"Update the dependencies array to be: [delay, dispatch, message.dispatchOnSend, typing]",{"range":"158","text":"159"},"Update the dependencies array to be: [appState.eventEmitted, submit]",{"range":"160","text":"161"},{"range":"162","text":"161"},[870,882],"[appState.messages, messages, queueIndex]",[1009,1028],"[appState.messages, messages.length, queueIndex]",[1602,1604],"[initializeApp]",[1018,1025],"[delay, dispatch, message.dispatchOnSend, typing]",[698,721],"[appState.eventEmitted, submit]",[804,827]]